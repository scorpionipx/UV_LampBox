
UV_LampBox.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00000564  000005f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000564  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800136  00800136  0000062e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000062e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000660  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011cc  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f0  00000000  00000000  0000190c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000742  00000000  00000000  000022fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00002a40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048a  00000000  00000000  00002b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000203  00000000  00000000  0000300e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00003211  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e6       	ldi	r30, 0x64	; 100
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 33       	cpi	r26, 0x36	; 54
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e3       	ldi	r26, 0x36	; 54
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 33       	cpi	r26, 0x3E	; 62
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 2c 02 	call	0x458	; 0x458 <main>
  9e:	0c 94 b0 02 	jmp	0x560	; 0x560 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <decrement_clock>:

#include "Global.h"

void decrement_clock()
{
	if(CLOCK.S >= 1)
  a6:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <CLOCK+0x4>
  aa:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <CLOCK+0x5>
  ae:	00 97       	sbiw	r24, 0x00	; 0
  b0:	31 f0       	breq	.+12     	; 0xbe <decrement_clock+0x18>
	{
		CLOCK.S --;
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <CLOCK+0x5>
  b8:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <CLOCK+0x4>
  bc:	08 95       	ret
	}
	else
	{
		CLOCK.S = 59;
  be:	e8 e3       	ldi	r30, 0x38	; 56
  c0:	f1 e0       	ldi	r31, 0x01	; 1
  c2:	8b e3       	ldi	r24, 0x3B	; 59
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	95 83       	std	Z+5, r25	; 0x05
  c8:	84 83       	std	Z+4, r24	; 0x04
		if(CLOCK.M >= 1)
  ca:	82 81       	ldd	r24, Z+2	; 0x02
  cc:	93 81       	ldd	r25, Z+3	; 0x03
  ce:	00 97       	sbiw	r24, 0x00	; 0
  d0:	31 f0       	breq	.+12     	; 0xde <decrement_clock+0x38>
		{
			CLOCK.M --;
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <CLOCK+0x3>
  d8:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <CLOCK+0x2>
  dc:	08 95       	ret
		}
		else
		{
			CLOCK.M = 59;
  de:	e8 e3       	ldi	r30, 0x38	; 56
  e0:	f1 e0       	ldi	r31, 0x01	; 1
  e2:	8b e3       	ldi	r24, 0x3B	; 59
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	93 83       	std	Z+3, r25	; 0x03
  e8:	82 83       	std	Z+2, r24	; 0x02
			if(CLOCK.H >= 1)
  ea:	80 81       	ld	r24, Z
  ec:	91 81       	ldd	r25, Z+1	; 0x01
  ee:	00 97       	sbiw	r24, 0x00	; 0
  f0:	29 f0       	breq	.+10     	; 0xfc <decrement_clock+0x56>
			{
				CLOCK.H --;
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <CLOCK+0x1>
  f8:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <CLOCK>
  fc:	08 95       	ret

000000fe <init_interrupt_200ms>:

// 10 ms timer
void init_interrupt_200ms()
{
	// Set the Timer Mode to CTC
	TCCR0A |= (1 << WGM01);
  fe:	84 b5       	in	r24, 0x24	; 36
 100:	82 60       	ori	r24, 0x02	; 2
 102:	84 bd       	out	0x24, r24	; 36

	// Set the value that you want to count to
	OCR0A = 0x26;
 104:	86 e2       	ldi	r24, 0x26	; 38
 106:	87 bd       	out	0x27, r24	; 39

	TIMSK0 |= (1 << OCIE0A);    //Set the ISR COMPA vector
 108:	ee e6       	ldi	r30, 0x6E	; 110
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	82 60       	ori	r24, 0x02	; 2
 110:	80 83       	st	Z, r24

	TCCR0B |= (1 << CS02);
 112:	85 b5       	in	r24, 0x25	; 37
 114:	84 60       	ori	r24, 0x04	; 4
 116:	85 bd       	out	0x25, r24	; 37
 118:	08 95       	ret

0000011a <__vector_14>:
	// set prescaler to 256 and start the timer
}

ISR (TIMER0_COMPA_vect)  // timer0 overflow interrupt
{
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	2f 93       	push	r18
 126:	3f 93       	push	r19
 128:	4f 93       	push	r20
 12a:	5f 93       	push	r21
 12c:	6f 93       	push	r22
 12e:	7f 93       	push	r23
 130:	8f 93       	push	r24
 132:	9f 93       	push	r25
 134:	af 93       	push	r26
 136:	bf 93       	push	r27
 138:	ef 93       	push	r30
 13a:	ff 93       	push	r31
	//event to be executed every 10ms here
	counter ++;
 13c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 140:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 14a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	if(counter >= 100)
 14e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 152:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 156:	84 36       	cpi	r24, 0x64	; 100
 158:	91 05       	cpc	r25, r1
 15a:	6c f0       	brlt	.+26     	; 0x176 <__vector_14+0x5c>
	{
		counter = 1;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 164:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		PORTC ^= 1 << 0;
 168:	98 b1       	in	r25, 0x08	; 8
 16a:	89 27       	eor	r24, r25
 16c:	88 b9       	out	0x08, r24	; 8
		decrement_clock();
 16e:	0e 94 53 00 	call	0xa6	; 0xa6 <decrement_clock>
		display_time();
 172:	0e 94 7d 01 	call	0x2fa	; 0x2fa <display_time>
	}
}
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	bf 91       	pop	r27
 17c:	af 91       	pop	r26
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	7f 91       	pop	r23
 184:	6f 91       	pop	r22
 186:	5f 91       	pop	r21
 188:	4f 91       	pop	r20
 18a:	3f 91       	pop	r19
 18c:	2f 91       	pop	r18
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <put_Char_LCD_Display>:
#define MAX_CHARS_PER_ROW 16
#define LCD_DELAY_MS 10

void put_Char_LCD_Display(int ch, int type)
{
	PORTD = (PORTD&0x0F)|(ch&0xF0);
 198:	2b b1       	in	r18, 0x0b	; 11
 19a:	38 2f       	mov	r19, r24
 19c:	30 7f       	andi	r19, 0xF0	; 240
 19e:	2f 70       	andi	r18, 0x0F	; 15
 1a0:	23 2b       	or	r18, r19
 1a2:	2b b9       	out	0x0b, r18	; 11
	PORTD = (PORTD&0xFE)|(type&0x01);
 1a4:	2b b1       	in	r18, 0x0b	; 11
 1a6:	61 70       	andi	r22, 0x01	; 1
 1a8:	2e 7f       	andi	r18, 0xFE	; 254
 1aa:	26 2b       	or	r18, r22
 1ac:	2b b9       	out	0x0b, r18	; 11
	PORTD = PORTD|0x02;
 1ae:	59 9a       	sbi	0x0b, 1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b0:	e3 ec       	ldi	r30, 0xC3	; 195
 1b2:	f9 e0       	ldi	r31, 0x09	; 9
 1b4:	31 97       	sbiw	r30, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <put_Char_LCD_Display+0x1c>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <put_Char_LCD_Display+0x22>
 1ba:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	PORTD &= 0xFC;
 1bc:	2b b1       	in	r18, 0x0b	; 11
 1be:	2c 7f       	andi	r18, 0xFC	; 252
 1c0:	2b b9       	out	0x0b, r18	; 11
	PORTD = (PORTD&0x0F)|((ch<<4)&0xF0);
 1c2:	2b b1       	in	r18, 0x0b	; 11
 1c4:	82 95       	swap	r24
 1c6:	92 95       	swap	r25
 1c8:	90 7f       	andi	r25, 0xF0	; 240
 1ca:	98 27       	eor	r25, r24
 1cc:	80 7f       	andi	r24, 0xF0	; 240
 1ce:	98 27       	eor	r25, r24
 1d0:	92 2f       	mov	r25, r18
 1d2:	9f 70       	andi	r25, 0x0F	; 15
 1d4:	89 2b       	or	r24, r25
 1d6:	8b b9       	out	0x0b, r24	; 11
	PORTD = (PORTD&0xFE)|(type&0x01);
 1d8:	8b b1       	in	r24, 0x0b	; 11
 1da:	8e 7f       	andi	r24, 0xFE	; 254
 1dc:	68 2b       	or	r22, r24
 1de:	6b b9       	out	0x0b, r22	; 11
	PORTD = PORTD|0x02;
 1e0:	59 9a       	sbi	0x0b, 1	; 11
 1e2:	83 ec       	ldi	r24, 0xC3	; 195
 1e4:	99 e0       	ldi	r25, 0x09	; 9
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <put_Char_LCD_Display+0x4e>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <put_Char_LCD_Display+0x54>
 1ec:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	PORTD &= 0xFC;
 1ee:	8b b1       	in	r24, 0x0b	; 11
 1f0:	8c 7f       	andi	r24, 0xFC	; 252
 1f2:	8b b9       	out	0x0b, r24	; 11
 1f4:	08 95       	ret

000001f6 <init_LCD_Display>:
}

void init_LCD_Display(void)
{
	DDRD = 0xFF;
 1f6:	8f ef       	ldi	r24, 0xFF	; 255
 1f8:	8a b9       	out	0x0a, r24	; 10
	put_Char_LCD_Display(0x38,0);
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	88 e3       	ldi	r24, 0x38	; 56
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 cc 00 	call	0x198	; 0x198 <put_Char_LCD_Display>
 206:	83 ec       	ldi	r24, 0xC3	; 195
 208:	99 e0       	ldi	r25, 0x09	; 9
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <init_LCD_Display+0x14>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <init_LCD_Display+0x1a>
 210:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	put_Char_LCD_Display(0x38,0);
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	70 e0       	ldi	r23, 0x00	; 0
 216:	88 e3       	ldi	r24, 0x38	; 56
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 cc 00 	call	0x198	; 0x198 <put_Char_LCD_Display>
 21e:	83 ec       	ldi	r24, 0xC3	; 195
 220:	99 e0       	ldi	r25, 0x09	; 9
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <init_LCD_Display+0x2c>
 226:	00 c0       	rjmp	.+0      	; 0x228 <init_LCD_Display+0x32>
 228:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	put_Char_LCD_Display(0x38,0);
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	88 e3       	ldi	r24, 0x38	; 56
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 cc 00 	call	0x198	; 0x198 <put_Char_LCD_Display>
 236:	83 ec       	ldi	r24, 0xC3	; 195
 238:	99 e0       	ldi	r25, 0x09	; 9
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <init_LCD_Display+0x44>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <init_LCD_Display+0x4a>
 240:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	put_Char_LCD_Display(0x02,0);
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	70 e0       	ldi	r23, 0x00	; 0
 246:	82 e0       	ldi	r24, 0x02	; 2
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 cc 00 	call	0x198	; 0x198 <put_Char_LCD_Display>
 24e:	83 ec       	ldi	r24, 0xC3	; 195
 250:	99 e0       	ldi	r25, 0x09	; 9
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <init_LCD_Display+0x5c>
 256:	00 c0       	rjmp	.+0      	; 0x258 <init_LCD_Display+0x62>
 258:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	put_Char_LCD_Display(0x0C,0);
 25a:	60 e0       	ldi	r22, 0x00	; 0
 25c:	70 e0       	ldi	r23, 0x00	; 0
 25e:	8c e0       	ldi	r24, 0x0C	; 12
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 cc 00 	call	0x198	; 0x198 <put_Char_LCD_Display>
 266:	83 ec       	ldi	r24, 0xC3	; 195
 268:	99 e0       	ldi	r25, 0x09	; 9
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <init_LCD_Display+0x74>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <init_LCD_Display+0x7a>
 270:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	put_Char_LCD_Display(0x01,0);
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 cc 00 	call	0x198	; 0x198 <put_Char_LCD_Display>
 27e:	83 ec       	ldi	r24, 0xC3	; 195
 280:	99 e0       	ldi	r25, 0x09	; 9
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <init_LCD_Display+0x8c>
 286:	00 c0       	rjmp	.+0      	; 0x288 <init_LCD_Display+0x92>
 288:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	put_Char_LCD_Display(0x80,0);
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	80 e8       	ldi	r24, 0x80	; 128
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 cc 00 	call	0x198	; 0x198 <put_Char_LCD_Display>
 296:	83 ec       	ldi	r24, 0xC3	; 195
 298:	99 e0       	ldi	r25, 0x09	; 9
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <init_LCD_Display+0xa4>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <init_LCD_Display+0xaa>
 2a0:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	put_Char_LCD_Display(0x01,0);//clear display
 2a2:	60 e0       	ldi	r22, 0x00	; 0
 2a4:	70 e0       	ldi	r23, 0x00	; 0
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 cc 00 	call	0x198	; 0x198 <put_Char_LCD_Display>
 2ae:	08 95       	ret

000002b0 <put_string>:
}

// display string
void put_string(const char *_string)
{
 2b0:	ef 92       	push	r14
 2b2:	ff 92       	push	r15
 2b4:	0f 93       	push	r16
 2b6:	1f 93       	push	r17
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	8c 01       	movw	r16, r24
 2be:	7c 01       	movw	r14, r24
	int ch_index;
	for(ch_index=0;ch_index<strlen(_string);ch_index++)
 2c0:	c0 e0       	ldi	r28, 0x00	; 0
 2c2:	d0 e0       	ldi	r29, 0x00	; 0
 2c4:	09 c0       	rjmp	.+18     	; 0x2d8 <put_string+0x28>
	{
		put_Char_LCD_Display(_string[ch_index], 1);
 2c6:	f7 01       	movw	r30, r14
 2c8:	81 91       	ld	r24, Z+
 2ca:	7f 01       	movw	r14, r30
 2cc:	61 e0       	ldi	r22, 0x01	; 1
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 cc 00 	call	0x198	; 0x198 <put_Char_LCD_Display>

// display string
void put_string(const char *_string)
{
	int ch_index;
	for(ch_index=0;ch_index<strlen(_string);ch_index++)
 2d6:	21 96       	adiw	r28, 0x01	; 1
 2d8:	f8 01       	movw	r30, r16
 2da:	01 90       	ld	r0, Z+
 2dc:	00 20       	and	r0, r0
 2de:	e9 f7       	brne	.-6      	; 0x2da <put_string+0x2a>
 2e0:	31 97       	sbiw	r30, 0x01	; 1
 2e2:	e0 1b       	sub	r30, r16
 2e4:	f1 0b       	sbc	r31, r17
 2e6:	ce 17       	cp	r28, r30
 2e8:	df 07       	cpc	r29, r31
 2ea:	68 f3       	brcs	.-38     	; 0x2c6 <put_string+0x16>
	{
		put_Char_LCD_Display(_string[ch_index], 1);
	}
}
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	1f 91       	pop	r17
 2f2:	0f 91       	pop	r16
 2f4:	ff 90       	pop	r15
 2f6:	ef 90       	pop	r14
 2f8:	08 95       	ret

000002fa <display_time>:

void display_time()
{
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
	put_Char_LCD_Display(0xC0, 0);
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	70 e0       	ldi	r23, 0x00	; 0
 302:	80 ec       	ldi	r24, 0xC0	; 192
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 cc 00 	call	0x198	; 0x198 <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.H/10, 1);
 30a:	c8 e3       	ldi	r28, 0x38	; 56
 30c:	d1 e0       	ldi	r29, 0x01	; 1
 30e:	28 81       	ld	r18, Y
 310:	39 81       	ldd	r19, Y+1	; 0x01
 312:	ad ec       	ldi	r26, 0xCD	; 205
 314:	bc ec       	ldi	r27, 0xCC	; 204
 316:	0e 94 a1 02 	call	0x542	; 0x542 <__umulhisi3>
 31a:	96 95       	lsr	r25
 31c:	87 95       	ror	r24
 31e:	96 95       	lsr	r25
 320:	87 95       	ror	r24
 322:	96 95       	lsr	r25
 324:	87 95       	ror	r24
 326:	61 e0       	ldi	r22, 0x01	; 1
 328:	70 e0       	ldi	r23, 0x00	; 0
 32a:	c0 96       	adiw	r24, 0x30	; 48
 32c:	0e 94 cc 00 	call	0x198	; 0x198 <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.H%10, 1);
 330:	48 81       	ld	r20, Y
 332:	59 81       	ldd	r21, Y+1	; 0x01
 334:	9a 01       	movw	r18, r20
 336:	ad ec       	ldi	r26, 0xCD	; 205
 338:	bc ec       	ldi	r27, 0xCC	; 204
 33a:	0e 94 a1 02 	call	0x542	; 0x542 <__umulhisi3>
 33e:	96 95       	lsr	r25
 340:	87 95       	ror	r24
 342:	96 95       	lsr	r25
 344:	87 95       	ror	r24
 346:	96 95       	lsr	r25
 348:	87 95       	ror	r24
 34a:	9c 01       	movw	r18, r24
 34c:	22 0f       	add	r18, r18
 34e:	33 1f       	adc	r19, r19
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	82 0f       	add	r24, r18
 35e:	93 1f       	adc	r25, r19
 360:	9a 01       	movw	r18, r20
 362:	28 1b       	sub	r18, r24
 364:	39 0b       	sbc	r19, r25
 366:	c9 01       	movw	r24, r18
 368:	61 e0       	ldi	r22, 0x01	; 1
 36a:	70 e0       	ldi	r23, 0x00	; 0
 36c:	c0 96       	adiw	r24, 0x30	; 48
 36e:	0e 94 cc 00 	call	0x198	; 0x198 <put_Char_LCD_Display>
	put_Char_LCD_Display(':', 1);
 372:	61 e0       	ldi	r22, 0x01	; 1
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	8a e3       	ldi	r24, 0x3A	; 58
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 cc 00 	call	0x198	; 0x198 <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.M/10, 1);
 37e:	2a 81       	ldd	r18, Y+2	; 0x02
 380:	3b 81       	ldd	r19, Y+3	; 0x03
 382:	ad ec       	ldi	r26, 0xCD	; 205
 384:	bc ec       	ldi	r27, 0xCC	; 204
 386:	0e 94 a1 02 	call	0x542	; 0x542 <__umulhisi3>
 38a:	96 95       	lsr	r25
 38c:	87 95       	ror	r24
 38e:	96 95       	lsr	r25
 390:	87 95       	ror	r24
 392:	96 95       	lsr	r25
 394:	87 95       	ror	r24
 396:	61 e0       	ldi	r22, 0x01	; 1
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	c0 96       	adiw	r24, 0x30	; 48
 39c:	0e 94 cc 00 	call	0x198	; 0x198 <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.M%10, 1);
 3a0:	4a 81       	ldd	r20, Y+2	; 0x02
 3a2:	5b 81       	ldd	r21, Y+3	; 0x03
 3a4:	9a 01       	movw	r18, r20
 3a6:	ad ec       	ldi	r26, 0xCD	; 205
 3a8:	bc ec       	ldi	r27, 0xCC	; 204
 3aa:	0e 94 a1 02 	call	0x542	; 0x542 <__umulhisi3>
 3ae:	96 95       	lsr	r25
 3b0:	87 95       	ror	r24
 3b2:	96 95       	lsr	r25
 3b4:	87 95       	ror	r24
 3b6:	96 95       	lsr	r25
 3b8:	87 95       	ror	r24
 3ba:	9c 01       	movw	r18, r24
 3bc:	22 0f       	add	r18, r18
 3be:	33 1f       	adc	r19, r19
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	82 0f       	add	r24, r18
 3ce:	93 1f       	adc	r25, r19
 3d0:	9a 01       	movw	r18, r20
 3d2:	28 1b       	sub	r18, r24
 3d4:	39 0b       	sbc	r19, r25
 3d6:	c9 01       	movw	r24, r18
 3d8:	61 e0       	ldi	r22, 0x01	; 1
 3da:	70 e0       	ldi	r23, 0x00	; 0
 3dc:	c0 96       	adiw	r24, 0x30	; 48
 3de:	0e 94 cc 00 	call	0x198	; 0x198 <put_Char_LCD_Display>
	put_Char_LCD_Display(':', 1);
 3e2:	61 e0       	ldi	r22, 0x01	; 1
 3e4:	70 e0       	ldi	r23, 0x00	; 0
 3e6:	8a e3       	ldi	r24, 0x3A	; 58
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 cc 00 	call	0x198	; 0x198 <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.S/10, 1);
 3ee:	2c 81       	ldd	r18, Y+4	; 0x04
 3f0:	3d 81       	ldd	r19, Y+5	; 0x05
 3f2:	ad ec       	ldi	r26, 0xCD	; 205
 3f4:	bc ec       	ldi	r27, 0xCC	; 204
 3f6:	0e 94 a1 02 	call	0x542	; 0x542 <__umulhisi3>
 3fa:	96 95       	lsr	r25
 3fc:	87 95       	ror	r24
 3fe:	96 95       	lsr	r25
 400:	87 95       	ror	r24
 402:	96 95       	lsr	r25
 404:	87 95       	ror	r24
 406:	61 e0       	ldi	r22, 0x01	; 1
 408:	70 e0       	ldi	r23, 0x00	; 0
 40a:	c0 96       	adiw	r24, 0x30	; 48
 40c:	0e 94 cc 00 	call	0x198	; 0x198 <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.S%10, 1);
 410:	4c 81       	ldd	r20, Y+4	; 0x04
 412:	5d 81       	ldd	r21, Y+5	; 0x05
 414:	9a 01       	movw	r18, r20
 416:	ad ec       	ldi	r26, 0xCD	; 205
 418:	bc ec       	ldi	r27, 0xCC	; 204
 41a:	0e 94 a1 02 	call	0x542	; 0x542 <__umulhisi3>
 41e:	96 95       	lsr	r25
 420:	87 95       	ror	r24
 422:	96 95       	lsr	r25
 424:	87 95       	ror	r24
 426:	96 95       	lsr	r25
 428:	87 95       	ror	r24
 42a:	9c 01       	movw	r18, r24
 42c:	22 0f       	add	r18, r18
 42e:	33 1f       	adc	r19, r19
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	88 0f       	add	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	82 0f       	add	r24, r18
 43e:	93 1f       	adc	r25, r19
 440:	9a 01       	movw	r18, r20
 442:	28 1b       	sub	r18, r24
 444:	39 0b       	sbc	r19, r25
 446:	c9 01       	movw	r24, r18
 448:	61 e0       	ldi	r22, 0x01	; 1
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	c0 96       	adiw	r24, 0x30	; 48
 44e:	0e 94 cc 00 	call	0x198	; 0x198 <put_Char_LCD_Display>
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	08 95       	ret

00000458 <main>:

int main(void)
{
    /* Replace with your application code */
	
	STATE_MACHINE = STATE_INIT;
 458:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <__data_end+0x1>
 45c:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end>
	
	CLOCK.H = 0;
 460:	e8 e3       	ldi	r30, 0x38	; 56
 462:	f1 e0       	ldi	r31, 0x01	; 1
 464:	11 82       	std	Z+1, r1	; 0x01
 466:	10 82       	st	Z, r1
	CLOCK.M = 1;
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	93 83       	std	Z+3, r25	; 0x03
 46e:	82 83       	std	Z+2, r24	; 0x02
	CLOCK.S = 11;
 470:	8b e0       	ldi	r24, 0x0B	; 11
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	95 83       	std	Z+5, r25	; 0x05
 476:	84 83       	std	Z+4, r24	; 0x04
	
	init_interrupt_200ms();
 478:	0e 94 7f 00 	call	0xfe	; 0xfe <init_interrupt_200ms>
	
	DDRC |= 1 << 0;
 47c:	38 9a       	sbi	0x07, 0	; 7
	PORTC |= 1 << 0;
 47e:	40 9a       	sbi	0x08, 0	; 8
 480:	2f e7       	ldi	r18, 0x7F	; 127
 482:	89 ea       	ldi	r24, 0xA9	; 169
 484:	93 e0       	ldi	r25, 0x03	; 3
 486:	21 50       	subi	r18, 0x01	; 1
 488:	80 40       	sbci	r24, 0x00	; 0
 48a:	90 40       	sbci	r25, 0x00	; 0
 48c:	e1 f7       	brne	.-8      	; 0x486 <main+0x2e>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <main+0x38>
 490:	00 00       	nop
	
	_delay_ms(1200);
	
	init_LCD_Display();
 492:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <init_LCD_Display>
 496:	2f e7       	ldi	r18, 0x7F	; 127
 498:	89 ea       	ldi	r24, 0xA9	; 169
 49a:	93 e0       	ldi	r25, 0x03	; 3
 49c:	21 50       	subi	r18, 0x01	; 1
 49e:	80 40       	sbci	r24, 0x00	; 0
 4a0:	90 40       	sbci	r25, 0x00	; 0
 4a2:	e1 f7       	brne	.-8      	; 0x49c <main+0x44>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <main+0x4e>
 4a6:	00 00       	nop
	
	_delay_ms(1200);
	
	put_string("Initializing...");
 4a8:	82 e0       	ldi	r24, 0x02	; 2
 4aa:	91 e0       	ldi	r25, 0x01	; 1
 4ac:	0e 94 58 01 	call	0x2b0	; 0x2b0 <put_string>
 4b0:	2f e3       	ldi	r18, 0x3F	; 63
 4b2:	8d e0       	ldi	r24, 0x0D	; 13
 4b4:	93 e0       	ldi	r25, 0x03	; 3
 4b6:	21 50       	subi	r18, 0x01	; 1
 4b8:	80 40       	sbci	r24, 0x00	; 0
 4ba:	90 40       	sbci	r25, 0x00	; 0
 4bc:	e1 f7       	brne	.-8      	; 0x4b6 <main+0x5e>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <main+0x68>
 4c0:	00 00       	nop
	
	_delay_ms(1000);
	clear_display();
 4c2:	60 e0       	ldi	r22, 0x00	; 0
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 cc 00 	call	0x198	; 0x198 <put_Char_LCD_Display>
	
	put_Char_LCD_Display(0x80, 0);
 4ce:	60 e0       	ldi	r22, 0x00	; 0
 4d0:	70 e0       	ldi	r23, 0x00	; 0
 4d2:	80 e8       	ldi	r24, 0x80	; 128
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 cc 00 	call	0x198	; 0x198 <put_Char_LCD_Display>
	put_string("ScorpionIPX");
 4da:	82 e1       	ldi	r24, 0x12	; 18
 4dc:	91 e0       	ldi	r25, 0x01	; 1
 4de:	0e 94 58 01 	call	0x2b0	; 0x2b0 <put_string>
	
	put_Char_LCD_Display(0xC0, 0);
 4e2:	60 e0       	ldi	r22, 0x00	; 0
 4e4:	70 e0       	ldi	r23, 0x00	; 0
 4e6:	80 ec       	ldi	r24, 0xC0	; 192
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	0e 94 cc 00 	call	0x198	; 0x198 <put_Char_LCD_Display>
	put_string("UV LightBox v1.0");
 4ee:	8e e1       	ldi	r24, 0x1E	; 30
 4f0:	91 e0       	ldi	r25, 0x01	; 1
 4f2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <put_string>
 4f6:	2f eb       	ldi	r18, 0xBF	; 191
 4f8:	8c e5       	ldi	r24, 0x5C	; 92
 4fa:	95 e1       	ldi	r25, 0x15	; 21
 4fc:	21 50       	subi	r18, 0x01	; 1
 4fe:	80 40       	sbci	r24, 0x00	; 0
 500:	90 40       	sbci	r25, 0x00	; 0
 502:	e1 f7       	brne	.-8      	; 0x4fc <main+0xa4>
 504:	00 c0       	rjmp	.+0      	; 0x506 <main+0xae>
 506:	00 00       	nop
	
	_delay_ms(7000);
	clear_display();
 508:	60 e0       	ldi	r22, 0x00	; 0
 50a:	70 e0       	ldi	r23, 0x00	; 0
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	0e 94 cc 00 	call	0x198	; 0x198 <put_Char_LCD_Display>
	
	put_Char_LCD_Display(0x80, 0);
 514:	60 e0       	ldi	r22, 0x00	; 0
 516:	70 e0       	ldi	r23, 0x00	; 0
 518:	80 e8       	ldi	r24, 0x80	; 128
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	0e 94 cc 00 	call	0x198	; 0x198 <put_Char_LCD_Display>
	put_string("TIME:");
 520:	8f e2       	ldi	r24, 0x2F	; 47
 522:	91 e0       	ldi	r25, 0x01	; 1
 524:	0e 94 58 01 	call	0x2b0	; 0x2b0 <put_string>
	
	display_time();
 528:	0e 94 7d 01 	call	0x2fa	; 0x2fa <display_time>
	
	sei();
 52c:	78 94       	sei
 52e:	2f e3       	ldi	r18, 0x3F	; 63
 530:	8d e0       	ldi	r24, 0x0D	; 13
 532:	93 e0       	ldi	r25, 0x03	; 3
 534:	21 50       	subi	r18, 0x01	; 1
 536:	80 40       	sbci	r24, 0x00	; 0
 538:	90 40       	sbci	r25, 0x00	; 0
 53a:	e1 f7       	brne	.-8      	; 0x534 <main+0xdc>
 53c:	00 c0       	rjmp	.+0      	; 0x53e <main+0xe6>
 53e:	00 00       	nop
		/*_delay_ms(100);
		PORTC ^= 1 << 0;
		_delay_ms(5000);
		PORTC ^= 1 << 0;*/
		
    }
 540:	ff cf       	rjmp	.-2      	; 0x540 <main+0xe8>

00000542 <__umulhisi3>:
 542:	a2 9f       	mul	r26, r18
 544:	b0 01       	movw	r22, r0
 546:	b3 9f       	mul	r27, r19
 548:	c0 01       	movw	r24, r0
 54a:	a3 9f       	mul	r26, r19
 54c:	70 0d       	add	r23, r0
 54e:	81 1d       	adc	r24, r1
 550:	11 24       	eor	r1, r1
 552:	91 1d       	adc	r25, r1
 554:	b2 9f       	mul	r27, r18
 556:	70 0d       	add	r23, r0
 558:	81 1d       	adc	r24, r1
 55a:	11 24       	eor	r1, r1
 55c:	91 1d       	adc	r25, r1
 55e:	08 95       	ret

00000560 <_exit>:
 560:	f8 94       	cli

00000562 <__stop_program>:
 562:	ff cf       	rjmp	.-2      	; 0x562 <__stop_program>
