
UV_LampBox.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007c  00800100  00000d9a  00000e2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080017c  0080017c  00000eaa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000eaa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000edc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002187  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c6c  00000000  00000000  0000319b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000eb1  00000000  00000000  00003e07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  00004cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000593  00000000  00000000  00004e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000031d  00000000  00000000  0000540f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000572c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 87 04 	jmp	0x90e	; 0x90e <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e9       	ldi	r30, 0x9A	; 154
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 37       	cpi	r26, 0x7C	; 124
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e7       	ldi	r26, 0x7C	; 124
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 38       	cpi	r26, 0x89	; 137
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 08 06 	call	0xc10	; 0xc10 <main>
  9e:	0c 94 cb 06 	jmp	0xd96	; 0xd96 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_buttons>:
#include "IPX_Clock.h"
#include "IPX_UV_light_control.h"

void init_buttons()
{
	BUTTONS_DDR &= ~(1 << BUTTON_1_PIN | 1 << BUTTON_2_PIN | 1 << BUTTON_3_PIN | 1 << BUTTON_4_PIN);
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	83 7c       	andi	r24, 0xC3	; 195
  aa:	87 b9       	out	0x07, r24	; 7
	BUTTONS_PORT &= ~(1 << BUTTON_1_PIN | 1 << BUTTON_2_PIN | 1 << BUTTON_3_PIN | 1 << BUTTON_4_PIN);
  ac:	88 b1       	in	r24, 0x08	; 8
  ae:	83 7c       	andi	r24, 0xC3	; 195
  b0:	88 b9       	out	0x08, r24	; 8
	
	BUTTON_1_PRESSED = FALSE;
  b2:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <GLOBAL_BOOL>
	BUTTON_2_PRESSED = FALSE;
	BUTTON_3_PRESSED = FALSE;
	BUTTON_4_PRESSED = FALSE;
  b6:	88 7f       	andi	r24, 0xF8	; 248
  b8:	87 7f       	andi	r24, 0xF7	; 247
  ba:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <GLOBAL_BOOL>
  be:	08 95       	ret

000000c0 <read_buttons>:
}

void read_buttons()
{
	BUTTON_1_PRESSED = BUTTON_1_VALUE;
  c0:	96 b1       	in	r25, 0x06	; 6
  c2:	96 95       	lsr	r25
  c4:	96 95       	lsr	r25
  c6:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <GLOBAL_BOOL>
  ca:	90 fb       	bst	r25, 0
  cc:	80 f9       	bld	r24, 0
  ce:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <GLOBAL_BOOL>
	if(BUTTON_1_PRESSED)
  d2:	80 ff       	sbrs	r24, 0
  d4:	9a c0       	rjmp	.+308    	; 0x20a <read_buttons+0x14a>
	{
		PRESSED_BUTTON = BUTTON_1;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <PRESSED_BUTTON+0x1>
  de:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <PRESSED_BUTTON>
		BUTTONS_ALLOWED = FALSE;
  e2:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <GLOBAL_BOOL>
  e6:	8f 7e       	andi	r24, 0xEF	; 239
  e8:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <GLOBAL_BOOL>
		
		switch(STATE_MACHINE)
  ec:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
  f0:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <__data_end+0x1>
  f4:	84 30       	cpi	r24, 0x04	; 4
  f6:	91 05       	cpc	r25, r1
  f8:	e9 f1       	breq	.+122    	; 0x174 <read_buttons+0xb4>
  fa:	18 f4       	brcc	.+6      	; 0x102 <read_buttons+0x42>
  fc:	03 97       	sbiw	r24, 0x03	; 3
  fe:	41 f0       	breq	.+16     	; 0x110 <read_buttons+0x50>
 100:	08 95       	ret
 102:	85 30       	cpi	r24, 0x05	; 5
 104:	91 05       	cpc	r25, r1
 106:	09 f4       	brne	.+2      	; 0x10a <read_buttons+0x4a>
 108:	53 c0       	rjmp	.+166    	; 0x1b0 <read_buttons+0xf0>
 10a:	06 97       	sbiw	r24, 0x06	; 6
 10c:	31 f0       	breq	.+12     	; 0x11a <read_buttons+0x5a>
 10e:	08 95       	ret
		{
			case STATE_SETTINGS:
			{
				set_cursor(LEFT);
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	9f ef       	ldi	r25, 0xFF	; 255
 114:	0e 94 15 04 	call	0x82a	; 0x82a <set_cursor>
				break;
 118:	08 95       	ret
			}
			
			case STATE_FINISHED:
			{
				STATE_MACHINE = STATE_SETTINGS;
 11a:	83 e0       	ldi	r24, 0x03	; 3
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <__data_end+0x1>
 122:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
				BLINK_ON;
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	8d e0       	ldi	r24, 0x0D	; 13
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				clear_display();
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				put_Char_LCD_Display(0x80, 0);
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	80 e8       	ldi	r24, 0x80	; 128
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				put_string("SET TIME:");
 14a:	84 e0       	ldi	r24, 0x04	; 4
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	0e 94 82 05 	call	0xb04	; 0xb04 <put_string>
				
				CLOCK.S = CLOCK.M = CLOCK.H = 0;
 152:	e1 e8       	ldi	r30, 0x81	; 129
 154:	f1 e0       	ldi	r31, 0x01	; 1
 156:	11 82       	std	Z+1, r1	; 0x01
 158:	10 82       	st	Z, r1
 15a:	13 82       	std	Z+3, r1	; 0x03
 15c:	12 82       	std	Z+2, r1	; 0x02
 15e:	15 82       	std	Z+5, r1	; 0x05
 160:	14 82       	std	Z+4, r1	; 0x04
				
				display_time();
 162:	0e 94 a7 05 	call	0xb4e	; 0xb4e <display_time>
				put_Char_LCD_Display(0xC0, 0);
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	80 ec       	ldi	r24, 0xC0	; 192
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				break;
 172:	08 95       	ret
			}
			
			case STATE_WORKING:
			{
				STATE_MACHINE = STATE_PAUSE;
 174:	85 e0       	ldi	r24, 0x05	; 5
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <__data_end+0x1>
 17c:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
				UV_CONTROL_OFF;
 180:	41 98       	cbi	0x08, 1	; 8
				put_Char_LCD_Display(0x80, 0);
 182:	60 e0       	ldi	r22, 0x00	; 0
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	80 e8       	ldi	r24, 0x80	; 128
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				BLINK_ON;
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	70 e0       	ldi	r23, 0x00	; 0
 192:	8d e0       	ldi	r24, 0x0D	; 13
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				put_string("PAUSED     ");
 19a:	8e e0       	ldi	r24, 0x0E	; 14
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	0e 94 82 05 	call	0xb04	; 0xb04 <put_string>
				put_Char_LCD_Display(0x80 + 7, 0);
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	87 e8       	ldi	r24, 0x87	; 135
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				break;
 1ae:	08 95       	ret
			}
			
			case STATE_PAUSE:
			{
				STATE_MACHINE = STATE_SETTINGS;
 1b0:	83 e0       	ldi	r24, 0x03	; 3
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <__data_end+0x1>
 1b8:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
				BLINK_ON;
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	8d e0       	ldi	r24, 0x0D	; 13
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				clear_display();
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				put_Char_LCD_Display(0x80, 0);
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	80 e8       	ldi	r24, 0x80	; 128
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				put_string("SET TIME:");
 1e0:	84 e0       	ldi	r24, 0x04	; 4
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	0e 94 82 05 	call	0xb04	; 0xb04 <put_string>
				
				CLOCK.S = CLOCK.M = CLOCK.H = 0;
 1e8:	e1 e8       	ldi	r30, 0x81	; 129
 1ea:	f1 e0       	ldi	r31, 0x01	; 1
 1ec:	11 82       	std	Z+1, r1	; 0x01
 1ee:	10 82       	st	Z, r1
 1f0:	13 82       	std	Z+3, r1	; 0x03
 1f2:	12 82       	std	Z+2, r1	; 0x02
 1f4:	15 82       	std	Z+5, r1	; 0x05
 1f6:	14 82       	std	Z+4, r1	; 0x04
				
				display_time();
 1f8:	0e 94 a7 05 	call	0xb4e	; 0xb4e <display_time>
				put_Char_LCD_Display(0xC0, 0);
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	80 ec       	ldi	r24, 0xC0	; 192
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				break;
 208:	08 95       	ret
		}
		
		return;
	}
	
	BUTTON_2_PRESSED = BUTTON_2_VALUE;
 20a:	96 b1       	in	r25, 0x06	; 6
 20c:	96 95       	lsr	r25
 20e:	96 95       	lsr	r25
 210:	96 95       	lsr	r25
 212:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <GLOBAL_BOOL>
 216:	90 fb       	bst	r25, 0
 218:	81 f9       	bld	r24, 1
 21a:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <GLOBAL_BOOL>
	if(BUTTON_2_PRESSED)
 21e:	81 ff       	sbrs	r24, 1
 220:	9a c0       	rjmp	.+308    	; 0x356 <read_buttons+0x296>
	{
		PRESSED_BUTTON = BUTTON_2;
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <PRESSED_BUTTON+0x1>
 22a:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <PRESSED_BUTTON>
		BUTTONS_ALLOWED = FALSE;
 22e:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <GLOBAL_BOOL>
 232:	8f 7e       	andi	r24, 0xEF	; 239
 234:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <GLOBAL_BOOL>
		
		switch(STATE_MACHINE)
 238:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
 23c:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <__data_end+0x1>
 240:	84 30       	cpi	r24, 0x04	; 4
 242:	91 05       	cpc	r25, r1
 244:	e9 f1       	breq	.+122    	; 0x2c0 <read_buttons+0x200>
 246:	18 f4       	brcc	.+6      	; 0x24e <read_buttons+0x18e>
 248:	03 97       	sbiw	r24, 0x03	; 3
 24a:	41 f0       	breq	.+16     	; 0x25c <read_buttons+0x19c>
 24c:	08 95       	ret
 24e:	85 30       	cpi	r24, 0x05	; 5
 250:	91 05       	cpc	r25, r1
 252:	09 f4       	brne	.+2      	; 0x256 <read_buttons+0x196>
 254:	53 c0       	rjmp	.+166    	; 0x2fc <read_buttons+0x23c>
 256:	06 97       	sbiw	r24, 0x06	; 6
 258:	31 f0       	breq	.+12     	; 0x266 <read_buttons+0x1a6>
 25a:	08 95       	ret
		{
			case STATE_SETTINGS:
			{
				set_cursor(RIGHT);
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 15 04 	call	0x82a	; 0x82a <set_cursor>
				break;
 264:	08 95       	ret
			}
			
			case STATE_FINISHED:
			{
				STATE_MACHINE = STATE_SETTINGS;
 266:	83 e0       	ldi	r24, 0x03	; 3
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <__data_end+0x1>
 26e:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
				BLINK_ON;
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	8d e0       	ldi	r24, 0x0D	; 13
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				clear_display();
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	70 e0       	ldi	r23, 0x00	; 0
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				put_Char_LCD_Display(0x80, 0);
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	80 e8       	ldi	r24, 0x80	; 128
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				put_string("SET TIME:");
 296:	84 e0       	ldi	r24, 0x04	; 4
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	0e 94 82 05 	call	0xb04	; 0xb04 <put_string>
				
				CLOCK.S = CLOCK.M = CLOCK.H = 0;
 29e:	e1 e8       	ldi	r30, 0x81	; 129
 2a0:	f1 e0       	ldi	r31, 0x01	; 1
 2a2:	11 82       	std	Z+1, r1	; 0x01
 2a4:	10 82       	st	Z, r1
 2a6:	13 82       	std	Z+3, r1	; 0x03
 2a8:	12 82       	std	Z+2, r1	; 0x02
 2aa:	15 82       	std	Z+5, r1	; 0x05
 2ac:	14 82       	std	Z+4, r1	; 0x04
				
				display_time();
 2ae:	0e 94 a7 05 	call	0xb4e	; 0xb4e <display_time>
				put_Char_LCD_Display(0xC0, 0);
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	80 ec       	ldi	r24, 0xC0	; 192
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				break;
 2be:	08 95       	ret
			}
			
			case STATE_WORKING:
			{
				STATE_MACHINE = STATE_PAUSE;
 2c0:	85 e0       	ldi	r24, 0x05	; 5
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <__data_end+0x1>
 2c8:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
				UV_CONTROL_OFF;
 2cc:	41 98       	cbi	0x08, 1	; 8
				put_Char_LCD_Display(0x80, 0);
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	70 e0       	ldi	r23, 0x00	; 0
 2d2:	80 e8       	ldi	r24, 0x80	; 128
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				BLINK_ON;
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	70 e0       	ldi	r23, 0x00	; 0
 2de:	8d e0       	ldi	r24, 0x0D	; 13
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				put_string("PAUSED     ");
 2e6:	8e e0       	ldi	r24, 0x0E	; 14
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	0e 94 82 05 	call	0xb04	; 0xb04 <put_string>
				put_Char_LCD_Display(0x80 + 7, 0);
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	87 e8       	ldi	r24, 0x87	; 135
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				break;
 2fa:	08 95       	ret
			}
	
			case STATE_PAUSE:
			{
				STATE_MACHINE = STATE_SETTINGS;
 2fc:	83 e0       	ldi	r24, 0x03	; 3
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <__data_end+0x1>
 304:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
				BLINK_ON;
 308:	60 e0       	ldi	r22, 0x00	; 0
 30a:	70 e0       	ldi	r23, 0x00	; 0
 30c:	8d e0       	ldi	r24, 0x0D	; 13
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				clear_display();
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	70 e0       	ldi	r23, 0x00	; 0
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				put_Char_LCD_Display(0x80, 0);
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	70 e0       	ldi	r23, 0x00	; 0
 324:	80 e8       	ldi	r24, 0x80	; 128
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				put_string("SET TIME:");
 32c:	84 e0       	ldi	r24, 0x04	; 4
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	0e 94 82 05 	call	0xb04	; 0xb04 <put_string>
		
				CLOCK.S = CLOCK.M = CLOCK.H = 0;
 334:	e1 e8       	ldi	r30, 0x81	; 129
 336:	f1 e0       	ldi	r31, 0x01	; 1
 338:	11 82       	std	Z+1, r1	; 0x01
 33a:	10 82       	st	Z, r1
 33c:	13 82       	std	Z+3, r1	; 0x03
 33e:	12 82       	std	Z+2, r1	; 0x02
 340:	15 82       	std	Z+5, r1	; 0x05
 342:	14 82       	std	Z+4, r1	; 0x04
		
				display_time();
 344:	0e 94 a7 05 	call	0xb4e	; 0xb4e <display_time>
				put_Char_LCD_Display(0xC0, 0);
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	70 e0       	ldi	r23, 0x00	; 0
 34c:	80 ec       	ldi	r24, 0xC0	; 192
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				break;
 354:	08 95       	ret
		}
		
		return;
	}
	
	BUTTON_3_PRESSED = BUTTON_3_VALUE;
 356:	96 b1       	in	r25, 0x06	; 6
 358:	92 95       	swap	r25
 35a:	9f 70       	andi	r25, 0x0F	; 15
 35c:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <GLOBAL_BOOL>
 360:	90 fb       	bst	r25, 0
 362:	82 f9       	bld	r24, 2
 364:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <GLOBAL_BOOL>
	if(BUTTON_3_PRESSED)
 368:	82 ff       	sbrs	r24, 2
 36a:	89 c0       	rjmp	.+274    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
	{
		PRESSED_BUTTON = BUTTON_3;
 36c:	83 e0       	ldi	r24, 0x03	; 3
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <PRESSED_BUTTON+0x1>
 374:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <PRESSED_BUTTON>
		BUTTONS_ALLOWED = FALSE;
 378:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <GLOBAL_BOOL>
 37c:	8f 7e       	andi	r24, 0xEF	; 239
 37e:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <GLOBAL_BOOL>
		
		switch(STATE_MACHINE)
 382:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
 386:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <__data_end+0x1>
 38a:	84 30       	cpi	r24, 0x04	; 4
 38c:	91 05       	cpc	r25, r1
 38e:	e9 f1       	breq	.+122    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 390:	18 f4       	brcc	.+6      	; 0x398 <read_buttons+0x2d8>
 392:	03 97       	sbiw	r24, 0x03	; 3
 394:	41 f0       	breq	.+16     	; 0x3a6 <read_buttons+0x2e6>
 396:	08 95       	ret
 398:	85 30       	cpi	r24, 0x05	; 5
 39a:	91 05       	cpc	r25, r1
 39c:	09 f4       	brne	.+2      	; 0x3a0 <read_buttons+0x2e0>
 39e:	53 c0       	rjmp	.+166    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 3a0:	06 97       	sbiw	r24, 0x06	; 6
 3a2:	31 f0       	breq	.+12     	; 0x3b0 <read_buttons+0x2f0>
 3a4:	08 95       	ret
		{
			case STATE_SETTINGS:
			{
				set_time(DECREASE_TIME);
 3a6:	8f ef       	ldi	r24, 0xFF	; 255
 3a8:	9f ef       	ldi	r25, 0xFF	; 255
 3aa:	0e 94 31 03 	call	0x662	; 0x662 <set_time>
				break;
 3ae:	08 95       	ret
			}
			
			case STATE_FINISHED:
			{
				STATE_MACHINE = STATE_SETTINGS;
 3b0:	83 e0       	ldi	r24, 0x03	; 3
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <__data_end+0x1>
 3b8:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
				BLINK_ON;
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	8d e0       	ldi	r24, 0x0D	; 13
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				clear_display();
 3c8:	60 e0       	ldi	r22, 0x00	; 0
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				put_Char_LCD_Display(0x80, 0);
 3d4:	60 e0       	ldi	r22, 0x00	; 0
 3d6:	70 e0       	ldi	r23, 0x00	; 0
 3d8:	80 e8       	ldi	r24, 0x80	; 128
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				put_string("SET TIME:");
 3e0:	84 e0       	ldi	r24, 0x04	; 4
 3e2:	91 e0       	ldi	r25, 0x01	; 1
 3e4:	0e 94 82 05 	call	0xb04	; 0xb04 <put_string>
				
				CLOCK.S = CLOCK.M = CLOCK.H = 0;
 3e8:	e1 e8       	ldi	r30, 0x81	; 129
 3ea:	f1 e0       	ldi	r31, 0x01	; 1
 3ec:	11 82       	std	Z+1, r1	; 0x01
 3ee:	10 82       	st	Z, r1
 3f0:	13 82       	std	Z+3, r1	; 0x03
 3f2:	12 82       	std	Z+2, r1	; 0x02
 3f4:	15 82       	std	Z+5, r1	; 0x05
 3f6:	14 82       	std	Z+4, r1	; 0x04
				
				display_time();
 3f8:	0e 94 a7 05 	call	0xb4e	; 0xb4e <display_time>
				put_Char_LCD_Display(0xC0, 0);
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	80 ec       	ldi	r24, 0xC0	; 192
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				break;
 408:	08 95       	ret
			}
			
			case STATE_WORKING:
			{
				STATE_MACHINE = STATE_PAUSE;
 40a:	85 e0       	ldi	r24, 0x05	; 5
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <__data_end+0x1>
 412:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
				UV_CONTROL_OFF;
 416:	41 98       	cbi	0x08, 1	; 8
				put_Char_LCD_Display(0x80, 0);
 418:	60 e0       	ldi	r22, 0x00	; 0
 41a:	70 e0       	ldi	r23, 0x00	; 0
 41c:	80 e8       	ldi	r24, 0x80	; 128
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				BLINK_ON;
 424:	60 e0       	ldi	r22, 0x00	; 0
 426:	70 e0       	ldi	r23, 0x00	; 0
 428:	8d e0       	ldi	r24, 0x0D	; 13
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				put_string("PAUSED     ");
 430:	8e e0       	ldi	r24, 0x0E	; 14
 432:	91 e0       	ldi	r25, 0x01	; 1
 434:	0e 94 82 05 	call	0xb04	; 0xb04 <put_string>
				put_Char_LCD_Display(0x80 + 7, 0);
 438:	60 e0       	ldi	r22, 0x00	; 0
 43a:	70 e0       	ldi	r23, 0x00	; 0
 43c:	87 e8       	ldi	r24, 0x87	; 135
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				break;
 444:	08 95       	ret
			}
			
			case STATE_PAUSE:
			{
				put_Char_LCD_Display(0x80, 0);
 446:	60 e0       	ldi	r22, 0x00	; 0
 448:	70 e0       	ldi	r23, 0x00	; 0
 44a:	80 e8       	ldi	r24, 0x80	; 128
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				put_string("WORKING...    ");
 452:	8a e1       	ldi	r24, 0x1A	; 26
 454:	91 e0       	ldi	r25, 0x01	; 1
 456:	0e 94 82 05 	call	0xb04	; 0xb04 <put_string>
				CURSON_POSITION = CP_HOURS_X_10;
 45a:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <CURSON_POSITION+0x1>
 45e:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <CURSON_POSITION>
				BLINK_OFF;
 462:	60 e0       	ldi	r22, 0x00	; 0
 464:	70 e0       	ldi	r23, 0x00	; 0
 466:	8c e0       	ldi	r24, 0x0C	; 12
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				STATE_MACHINE = STATE_WORKING;
 46e:	84 e0       	ldi	r24, 0x04	; 4
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <__data_end+0x1>
 476:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
				UV_CONTROL_ON;
 47a:	41 9a       	sbi	0x08, 1	; 8
				break;
 47c:	08 95       	ret
		}
		
		return;
	}
	
	BUTTON_4_PRESSED = BUTTON_4_VALUE;
 47e:	96 b1       	in	r25, 0x06	; 6
 480:	92 95       	swap	r25
 482:	96 95       	lsr	r25
 484:	97 70       	andi	r25, 0x07	; 7
 486:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <GLOBAL_BOOL>
 48a:	90 fb       	bst	r25, 0
 48c:	83 f9       	bld	r24, 3
 48e:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <GLOBAL_BOOL>
	if(BUTTON_4_PRESSED)
 492:	83 ff       	sbrs	r24, 3
 494:	89 c0       	rjmp	.+274    	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
	{
		PRESSED_BUTTON = BUTTON_4;
 496:	84 e0       	ldi	r24, 0x04	; 4
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <PRESSED_BUTTON+0x1>
 49e:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <PRESSED_BUTTON>
		BUTTONS_ALLOWED = FALSE;
 4a2:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <GLOBAL_BOOL>
 4a6:	8f 7e       	andi	r24, 0xEF	; 239
 4a8:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <GLOBAL_BOOL>
		
		switch(STATE_MACHINE)
 4ac:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
 4b0:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <__data_end+0x1>
 4b4:	84 30       	cpi	r24, 0x04	; 4
 4b6:	91 05       	cpc	r25, r1
 4b8:	e9 f1       	breq	.+122    	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
 4ba:	18 f4       	brcc	.+6      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4bc:	03 97       	sbiw	r24, 0x03	; 3
 4be:	41 f0       	breq	.+16     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4c0:	08 95       	ret
 4c2:	85 30       	cpi	r24, 0x05	; 5
 4c4:	91 05       	cpc	r25, r1
 4c6:	09 f4       	brne	.+2      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 4c8:	53 c0       	rjmp	.+166    	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
 4ca:	06 97       	sbiw	r24, 0x06	; 6
 4cc:	31 f0       	breq	.+12     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4ce:	08 95       	ret
		{
			case STATE_SETTINGS:
			{
				set_time(INCREASE_TIME);
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 31 03 	call	0x662	; 0x662 <set_time>
				break;
 4d8:	08 95       	ret
			}
			
			case STATE_FINISHED:
			{
				STATE_MACHINE = STATE_SETTINGS;
 4da:	83 e0       	ldi	r24, 0x03	; 3
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <__data_end+0x1>
 4e2:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
				BLINK_ON;
 4e6:	60 e0       	ldi	r22, 0x00	; 0
 4e8:	70 e0       	ldi	r23, 0x00	; 0
 4ea:	8d e0       	ldi	r24, 0x0D	; 13
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				clear_display();
 4f2:	60 e0       	ldi	r22, 0x00	; 0
 4f4:	70 e0       	ldi	r23, 0x00	; 0
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				put_Char_LCD_Display(0x80, 0);
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	80 e8       	ldi	r24, 0x80	; 128
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				put_string("SET TIME:");
 50a:	84 e0       	ldi	r24, 0x04	; 4
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	0e 94 82 05 	call	0xb04	; 0xb04 <put_string>
				
				CLOCK.S = CLOCK.M = CLOCK.H = 0;
 512:	e1 e8       	ldi	r30, 0x81	; 129
 514:	f1 e0       	ldi	r31, 0x01	; 1
 516:	11 82       	std	Z+1, r1	; 0x01
 518:	10 82       	st	Z, r1
 51a:	13 82       	std	Z+3, r1	; 0x03
 51c:	12 82       	std	Z+2, r1	; 0x02
 51e:	15 82       	std	Z+5, r1	; 0x05
 520:	14 82       	std	Z+4, r1	; 0x04
				
				display_time();
 522:	0e 94 a7 05 	call	0xb4e	; 0xb4e <display_time>
				put_Char_LCD_Display(0xC0, 0);
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	70 e0       	ldi	r23, 0x00	; 0
 52a:	80 ec       	ldi	r24, 0xC0	; 192
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				break;
 532:	08 95       	ret
			}
			
			case STATE_WORKING:
			{
				STATE_MACHINE = STATE_PAUSE;
 534:	85 e0       	ldi	r24, 0x05	; 5
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <__data_end+0x1>
 53c:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
				UV_CONTROL_OFF;
 540:	41 98       	cbi	0x08, 1	; 8
				put_Char_LCD_Display(0x80, 0);
 542:	60 e0       	ldi	r22, 0x00	; 0
 544:	70 e0       	ldi	r23, 0x00	; 0
 546:	80 e8       	ldi	r24, 0x80	; 128
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				BLINK_ON;
 54e:	60 e0       	ldi	r22, 0x00	; 0
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	8d e0       	ldi	r24, 0x0D	; 13
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				put_string("PAUSED     ");
 55a:	8e e0       	ldi	r24, 0x0E	; 14
 55c:	91 e0       	ldi	r25, 0x01	; 1
 55e:	0e 94 82 05 	call	0xb04	; 0xb04 <put_string>
				put_Char_LCD_Display(0x80 + 7, 0);
 562:	60 e0       	ldi	r22, 0x00	; 0
 564:	70 e0       	ldi	r23, 0x00	; 0
 566:	87 e8       	ldi	r24, 0x87	; 135
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				break;
 56e:	08 95       	ret
			}
			
			case STATE_PAUSE:
			{				
				put_Char_LCD_Display(0x80, 0);
 570:	60 e0       	ldi	r22, 0x00	; 0
 572:	70 e0       	ldi	r23, 0x00	; 0
 574:	80 e8       	ldi	r24, 0x80	; 128
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				put_string("WORKING...    ");
 57c:	8a e1       	ldi	r24, 0x1A	; 26
 57e:	91 e0       	ldi	r25, 0x01	; 1
 580:	0e 94 82 05 	call	0xb04	; 0xb04 <put_string>
				CURSON_POSITION = CP_HOURS_X_10;
 584:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <CURSON_POSITION+0x1>
 588:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <CURSON_POSITION>
				BLINK_OFF;
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	70 e0       	ldi	r23, 0x00	; 0
 590:	8c e0       	ldi	r24, 0x0C	; 12
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				STATE_MACHINE = STATE_WORKING;
 598:	84 e0       	ldi	r24, 0x04	; 4
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <__data_end+0x1>
 5a0:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
				UV_CONTROL_ON;
 5a4:	41 9a       	sbi	0x08, 1	; 8
				break;
 5a6:	08 95       	ret
		}
		
		return;
	}
	
	PRESSED_BUTTON = NO_BUTTON;
 5a8:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <PRESSED_BUTTON+0x1>
 5ac:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <PRESSED_BUTTON>
 5b0:	08 95       	ret

000005b2 <decrement_clock>:
#include "IPX_LCD_Display.h"
#include "IPX_UV_light_control.h"

void decrement_clock()
{
	if(CLOCK.S >= 1)
 5b2:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <CLOCK+0x4>
 5b6:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <CLOCK+0x5>
 5ba:	18 16       	cp	r1, r24
 5bc:	19 06       	cpc	r1, r25
 5be:	34 f4       	brge	.+12     	; 0x5cc <decrement_clock+0x1a>
	{
		CLOCK.S --;
 5c0:	01 97       	sbiw	r24, 0x01	; 1
 5c2:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <CLOCK+0x5>
 5c6:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <CLOCK+0x4>
 5ca:	08 95       	ret
	}
	else
	{
		if(CLOCK.S == 0 && CLOCK.M == 0 && CLOCK.H ==0)
 5cc:	89 2b       	or	r24, r25
 5ce:	39 f5       	brne	.+78     	; 0x61e <decrement_clock+0x6c>
 5d0:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <CLOCK+0x2>
 5d4:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <CLOCK+0x3>
 5d8:	89 2b       	or	r24, r25
 5da:	09 f5       	brne	.+66     	; 0x61e <decrement_clock+0x6c>
 5dc:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <CLOCK>
 5e0:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <CLOCK+0x1>
 5e4:	89 2b       	or	r24, r25
 5e6:	d9 f4       	brne	.+54     	; 0x61e <decrement_clock+0x6c>
		{
			UV_CONTROL_OFF;
 5e8:	41 98       	cbi	0x08, 1	; 8
			STATE_MACHINE = STATE_FINISHED;
 5ea:	86 e0       	ldi	r24, 0x06	; 6
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <__data_end+0x1>
 5f2:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
			clear_display();
 5f6:	60 e0       	ldi	r22, 0x00	; 0
 5f8:	70 e0       	ldi	r23, 0x00	; 0
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
			put_string("WORK FINISHED");
 602:	89 e2       	ldi	r24, 0x29	; 41
 604:	91 e0       	ldi	r25, 0x01	; 1
 606:	0e 94 82 05 	call	0xb04	; 0xb04 <put_string>
			put_Char_LCD_Display(0xC0, 0);
 60a:	60 e0       	ldi	r22, 0x00	; 0
 60c:	70 e0       	ldi	r23, 0x00	; 0
 60e:	80 ec       	ldi	r24, 0xC0	; 192
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
			put_string("PRESS ANY KEY");
 616:	87 e3       	ldi	r24, 0x37	; 55
 618:	91 e0       	ldi	r25, 0x01	; 1
 61a:	0e 94 82 05 	call	0xb04	; 0xb04 <put_string>
		}
		CLOCK.S = 59;
 61e:	e1 e8       	ldi	r30, 0x81	; 129
 620:	f1 e0       	ldi	r31, 0x01	; 1
 622:	8b e3       	ldi	r24, 0x3B	; 59
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	95 83       	std	Z+5, r25	; 0x05
 628:	84 83       	std	Z+4, r24	; 0x04
		if(CLOCK.M >= 1)
 62a:	82 81       	ldd	r24, Z+2	; 0x02
 62c:	93 81       	ldd	r25, Z+3	; 0x03
 62e:	18 16       	cp	r1, r24
 630:	19 06       	cpc	r1, r25
 632:	34 f4       	brge	.+12     	; 0x640 <decrement_clock+0x8e>
		{
			CLOCK.M --;
 634:	01 97       	sbiw	r24, 0x01	; 1
 636:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <CLOCK+0x3>
 63a:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <CLOCK+0x2>
 63e:	08 95       	ret
		}
		else
		{
			CLOCK.M = 59;
 640:	e1 e8       	ldi	r30, 0x81	; 129
 642:	f1 e0       	ldi	r31, 0x01	; 1
 644:	8b e3       	ldi	r24, 0x3B	; 59
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	93 83       	std	Z+3, r25	; 0x03
 64a:	82 83       	std	Z+2, r24	; 0x02
			if(CLOCK.H >= 1)
 64c:	80 81       	ld	r24, Z
 64e:	91 81       	ldd	r25, Z+1	; 0x01
 650:	18 16       	cp	r1, r24
 652:	19 06       	cpc	r1, r25
 654:	2c f4       	brge	.+10     	; 0x660 <decrement_clock+0xae>
			{
				CLOCK.H --;
 656:	01 97       	sbiw	r24, 0x01	; 1
 658:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <CLOCK+0x1>
 65c:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <CLOCK>
 660:	08 95       	ret

00000662 <set_time>:
	}
}

void set_time(int increase_decrease)
{
	switch(CURSON_POSITION)
 662:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <CURSON_POSITION>
 666:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <CURSON_POSITION+0x1>
 66a:	23 30       	cpi	r18, 0x03	; 3
 66c:	31 05       	cpc	r19, r1
 66e:	09 f4       	brne	.+2      	; 0x672 <set_time+0x10>
 670:	54 c0       	rjmp	.+168    	; 0x71a <set_time+0xb8>
 672:	38 f4       	brcc	.+14     	; 0x682 <set_time+0x20>
 674:	21 15       	cp	r18, r1
 676:	31 05       	cpc	r19, r1
 678:	89 f0       	breq	.+34     	; 0x69c <set_time+0x3a>
 67a:	21 30       	cpi	r18, 0x01	; 1
 67c:	31 05       	cpc	r19, r1
 67e:	99 f1       	breq	.+102    	; 0x6e6 <set_time+0x84>
 680:	c7 c0       	rjmp	.+398    	; 0x810 <set_time+0x1ae>
 682:	26 30       	cpi	r18, 0x06	; 6
 684:	31 05       	cpc	r19, r1
 686:	09 f4       	brne	.+2      	; 0x68a <set_time+0x28>
 688:	87 c0       	rjmp	.+270    	; 0x798 <set_time+0x136>
 68a:	27 30       	cpi	r18, 0x07	; 7
 68c:	31 05       	cpc	r19, r1
 68e:	09 f4       	brne	.+2      	; 0x692 <set_time+0x30>
 690:	a7 c0       	rjmp	.+334    	; 0x7e0 <set_time+0x17e>
 692:	24 30       	cpi	r18, 0x04	; 4
 694:	31 05       	cpc	r19, r1
 696:	09 f0       	breq	.+2      	; 0x69a <set_time+0x38>
 698:	bb c0       	rjmp	.+374    	; 0x810 <set_time+0x1ae>
 69a:	64 c0       	rjmp	.+200    	; 0x764 <set_time+0x102>
	{
		case CP_HOURS_X_10:
		{
			CLOCK.H += increase_decrease * 10;
 69c:	e1 e8       	ldi	r30, 0x81	; 129
 69e:	f1 e0       	ldi	r31, 0x01	; 1
 6a0:	9c 01       	movw	r18, r24
 6a2:	22 0f       	add	r18, r18
 6a4:	33 1f       	adc	r19, r19
 6a6:	88 0f       	add	r24, r24
 6a8:	99 1f       	adc	r25, r25
 6aa:	88 0f       	add	r24, r24
 6ac:	99 1f       	adc	r25, r25
 6ae:	88 0f       	add	r24, r24
 6b0:	99 1f       	adc	r25, r25
 6b2:	82 0f       	add	r24, r18
 6b4:	93 1f       	adc	r25, r19
 6b6:	20 81       	ld	r18, Z
 6b8:	31 81       	ldd	r19, Z+1	; 0x01
 6ba:	82 0f       	add	r24, r18
 6bc:	93 1f       	adc	r25, r19
 6be:	91 83       	std	Z+1, r25	; 0x01
 6c0:	80 83       	st	Z, r24
			if(CLOCK.H > 99)
 6c2:	84 36       	cpi	r24, 0x64	; 100
 6c4:	91 05       	cpc	r25, r1
 6c6:	3c f0       	brlt	.+14     	; 0x6d6 <set_time+0x74>
			{
				CLOCK.H = 99;
 6c8:	83 e6       	ldi	r24, 0x63	; 99
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <CLOCK+0x1>
 6d0:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <CLOCK>
 6d4:	9d c0       	rjmp	.+314    	; 0x810 <set_time+0x1ae>
			}
			if(CLOCK.H < 0)
 6d6:	99 23       	and	r25, r25
 6d8:	0c f0       	brlt	.+2      	; 0x6dc <set_time+0x7a>
 6da:	9a c0       	rjmp	.+308    	; 0x810 <set_time+0x1ae>
			{
				CLOCK.H = 0;
 6dc:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <CLOCK+0x1>
 6e0:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <CLOCK>
 6e4:	95 c0       	rjmp	.+298    	; 0x810 <set_time+0x1ae>
			break;
		}
		
		case CP_HOURS:
		{
			CLOCK.H += increase_decrease;
 6e6:	e1 e8       	ldi	r30, 0x81	; 129
 6e8:	f1 e0       	ldi	r31, 0x01	; 1
 6ea:	20 81       	ld	r18, Z
 6ec:	31 81       	ldd	r19, Z+1	; 0x01
 6ee:	82 0f       	add	r24, r18
 6f0:	93 1f       	adc	r25, r19
 6f2:	91 83       	std	Z+1, r25	; 0x01
 6f4:	80 83       	st	Z, r24
			if(CLOCK.H > 99)
 6f6:	84 36       	cpi	r24, 0x64	; 100
 6f8:	91 05       	cpc	r25, r1
 6fa:	3c f0       	brlt	.+14     	; 0x70a <set_time+0xa8>
			{
				CLOCK.H = 99;
 6fc:	83 e6       	ldi	r24, 0x63	; 99
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <CLOCK+0x1>
 704:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <CLOCK>
 708:	83 c0       	rjmp	.+262    	; 0x810 <set_time+0x1ae>
			}
			if(CLOCK.H < 0)
 70a:	99 23       	and	r25, r25
 70c:	0c f0       	brlt	.+2      	; 0x710 <set_time+0xae>
 70e:	80 c0       	rjmp	.+256    	; 0x810 <set_time+0x1ae>
			{
				CLOCK.H = 0;
 710:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <CLOCK+0x1>
 714:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <CLOCK>
 718:	7b c0       	rjmp	.+246    	; 0x810 <set_time+0x1ae>
			break;
		}
		
		case CP_MINUTES_X_10:
		{
			CLOCK.M += increase_decrease * 10;
 71a:	e1 e8       	ldi	r30, 0x81	; 129
 71c:	f1 e0       	ldi	r31, 0x01	; 1
 71e:	9c 01       	movw	r18, r24
 720:	22 0f       	add	r18, r18
 722:	33 1f       	adc	r19, r19
 724:	88 0f       	add	r24, r24
 726:	99 1f       	adc	r25, r25
 728:	88 0f       	add	r24, r24
 72a:	99 1f       	adc	r25, r25
 72c:	88 0f       	add	r24, r24
 72e:	99 1f       	adc	r25, r25
 730:	82 0f       	add	r24, r18
 732:	93 1f       	adc	r25, r19
 734:	22 81       	ldd	r18, Z+2	; 0x02
 736:	33 81       	ldd	r19, Z+3	; 0x03
 738:	82 0f       	add	r24, r18
 73a:	93 1f       	adc	r25, r19
 73c:	93 83       	std	Z+3, r25	; 0x03
 73e:	82 83       	std	Z+2, r24	; 0x02
			if(CLOCK.M > 59)
 740:	8c 33       	cpi	r24, 0x3C	; 60
 742:	91 05       	cpc	r25, r1
 744:	3c f0       	brlt	.+14     	; 0x754 <set_time+0xf2>
			{
				CLOCK.M = 59;
 746:	8b e3       	ldi	r24, 0x3B	; 59
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <CLOCK+0x3>
 74e:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <CLOCK+0x2>
 752:	5e c0       	rjmp	.+188    	; 0x810 <set_time+0x1ae>
			}
			if(CLOCK.M < 0)
 754:	99 23       	and	r25, r25
 756:	0c f0       	brlt	.+2      	; 0x75a <set_time+0xf8>
 758:	5b c0       	rjmp	.+182    	; 0x810 <set_time+0x1ae>
			{
				CLOCK.M = 0;
 75a:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <CLOCK+0x3>
 75e:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <CLOCK+0x2>
 762:	56 c0       	rjmp	.+172    	; 0x810 <set_time+0x1ae>
			break;
		}
		
		case CP_MINUTES:
		{
			CLOCK.M += increase_decrease;
 764:	e1 e8       	ldi	r30, 0x81	; 129
 766:	f1 e0       	ldi	r31, 0x01	; 1
 768:	22 81       	ldd	r18, Z+2	; 0x02
 76a:	33 81       	ldd	r19, Z+3	; 0x03
 76c:	82 0f       	add	r24, r18
 76e:	93 1f       	adc	r25, r19
 770:	93 83       	std	Z+3, r25	; 0x03
 772:	82 83       	std	Z+2, r24	; 0x02
			if(CLOCK.M > 99)
 774:	84 36       	cpi	r24, 0x64	; 100
 776:	91 05       	cpc	r25, r1
 778:	3c f0       	brlt	.+14     	; 0x788 <set_time+0x126>
			{
				CLOCK.M = 99;
 77a:	83 e6       	ldi	r24, 0x63	; 99
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <CLOCK+0x3>
 782:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <CLOCK+0x2>
 786:	44 c0       	rjmp	.+136    	; 0x810 <set_time+0x1ae>
			}
			if(CLOCK.M < 0)
 788:	99 23       	and	r25, r25
 78a:	0c f0       	brlt	.+2      	; 0x78e <set_time+0x12c>
 78c:	41 c0       	rjmp	.+130    	; 0x810 <set_time+0x1ae>
			{
				CLOCK.M = 0;
 78e:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <CLOCK+0x3>
 792:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <CLOCK+0x2>
 796:	3c c0       	rjmp	.+120    	; 0x810 <set_time+0x1ae>
			break;
		}

		case CP_SECONDS_X_10:
		{
			CLOCK.S += increase_decrease * 10;
 798:	e1 e8       	ldi	r30, 0x81	; 129
 79a:	f1 e0       	ldi	r31, 0x01	; 1
 79c:	9c 01       	movw	r18, r24
 79e:	22 0f       	add	r18, r18
 7a0:	33 1f       	adc	r19, r19
 7a2:	88 0f       	add	r24, r24
 7a4:	99 1f       	adc	r25, r25
 7a6:	88 0f       	add	r24, r24
 7a8:	99 1f       	adc	r25, r25
 7aa:	88 0f       	add	r24, r24
 7ac:	99 1f       	adc	r25, r25
 7ae:	82 0f       	add	r24, r18
 7b0:	93 1f       	adc	r25, r19
 7b2:	24 81       	ldd	r18, Z+4	; 0x04
 7b4:	35 81       	ldd	r19, Z+5	; 0x05
 7b6:	82 0f       	add	r24, r18
 7b8:	93 1f       	adc	r25, r19
 7ba:	95 83       	std	Z+5, r25	; 0x05
 7bc:	84 83       	std	Z+4, r24	; 0x04
			if(CLOCK.S > 59)
 7be:	8c 33       	cpi	r24, 0x3C	; 60
 7c0:	91 05       	cpc	r25, r1
 7c2:	3c f0       	brlt	.+14     	; 0x7d2 <set_time+0x170>
			{
				CLOCK.S = 59;
 7c4:	8b e3       	ldi	r24, 0x3B	; 59
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <CLOCK+0x5>
 7cc:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <CLOCK+0x4>
 7d0:	1f c0       	rjmp	.+62     	; 0x810 <set_time+0x1ae>
			}
			if(CLOCK.S < 0)
 7d2:	99 23       	and	r25, r25
 7d4:	ec f4       	brge	.+58     	; 0x810 <set_time+0x1ae>
			{
				CLOCK.S = 0;
 7d6:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <CLOCK+0x5>
 7da:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <CLOCK+0x4>
 7de:	18 c0       	rjmp	.+48     	; 0x810 <set_time+0x1ae>
			break;
		}
		
		case CP_SECONDS:
		{
			CLOCK.S += increase_decrease;
 7e0:	e1 e8       	ldi	r30, 0x81	; 129
 7e2:	f1 e0       	ldi	r31, 0x01	; 1
 7e4:	24 81       	ldd	r18, Z+4	; 0x04
 7e6:	35 81       	ldd	r19, Z+5	; 0x05
 7e8:	82 0f       	add	r24, r18
 7ea:	93 1f       	adc	r25, r19
 7ec:	95 83       	std	Z+5, r25	; 0x05
 7ee:	84 83       	std	Z+4, r24	; 0x04
			if(CLOCK.S > 59)
 7f0:	8c 33       	cpi	r24, 0x3C	; 60
 7f2:	91 05       	cpc	r25, r1
 7f4:	3c f0       	brlt	.+14     	; 0x804 <set_time+0x1a2>
			{
				CLOCK.S = 59;
 7f6:	8b e3       	ldi	r24, 0x3B	; 59
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <CLOCK+0x5>
 7fe:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <CLOCK+0x4>
 802:	06 c0       	rjmp	.+12     	; 0x810 <set_time+0x1ae>
			}
			if(CLOCK.S < 0)
 804:	99 23       	and	r25, r25
 806:	24 f4       	brge	.+8      	; 0x810 <set_time+0x1ae>
			{
				CLOCK.S = 0;
 808:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <CLOCK+0x5>
 80c:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <CLOCK+0x4>
			}
			break;
		}
	}
	
	display_time();
 810:	0e 94 a7 05 	call	0xb4e	; 0xb4e <display_time>
	put_Char_LCD_Display(0xC0 + CURSON_POSITION, 0);
 814:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <CURSON_POSITION>
 818:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <CURSON_POSITION+0x1>
 81c:	60 e0       	ldi	r22, 0x00	; 0
 81e:	70 e0       	ldi	r23, 0x00	; 0
 820:	80 54       	subi	r24, 0x40	; 64
 822:	9f 4f       	sbci	r25, 0xFF	; 255
 824:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
 828:	08 95       	ret

0000082a <set_cursor>:
}

void set_cursor(int direction)
{
	switch(direction)
 82a:	8f 3f       	cpi	r24, 0xFF	; 255
 82c:	2f ef       	ldi	r18, 0xFF	; 255
 82e:	92 07       	cpc	r25, r18
 830:	19 f0       	breq	.+6      	; 0x838 <set_cursor+0xe>
 832:	01 97       	sbiw	r24, 0x01	; 1
 834:	c9 f0       	breq	.+50     	; 0x868 <set_cursor+0x3e>
 836:	50 c0       	rjmp	.+160    	; 0x8d8 <set_cursor+0xae>
	{
		case LEFT:
		{
			CURSON_POSITION --;
 838:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <CURSON_POSITION>
 83c:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <CURSON_POSITION+0x1>
 840:	c9 01       	movw	r24, r18
 842:	01 97       	sbiw	r24, 0x01	; 1
			if(CURSON_POSITION == 2 || CURSON_POSITION == 5)
 844:	82 30       	cpi	r24, 0x02	; 2
 846:	91 05       	cpc	r25, r1
 848:	41 f0       	breq	.+16     	; 0x85a <set_cursor+0x30>
 84a:	85 30       	cpi	r24, 0x05	; 5
 84c:	91 05       	cpc	r25, r1
 84e:	29 f0       	breq	.+10     	; 0x85a <set_cursor+0x30>
{
	switch(direction)
	{
		case LEFT:
		{
			CURSON_POSITION --;
 850:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <CURSON_POSITION+0x1>
 854:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <CURSON_POSITION>
 858:	3f c0       	rjmp	.+126    	; 0x8d8 <set_cursor+0xae>
			if(CURSON_POSITION == 2 || CURSON_POSITION == 5)
			{
				CURSON_POSITION --;
 85a:	22 50       	subi	r18, 0x02	; 2
 85c:	31 09       	sbc	r19, r1
 85e:	30 93 88 01 	sts	0x0188, r19	; 0x800188 <CURSON_POSITION+0x1>
 862:	20 93 87 01 	sts	0x0187, r18	; 0x800187 <CURSON_POSITION>
 866:	38 c0       	rjmp	.+112    	; 0x8d8 <set_cursor+0xae>
			break;
		}
		
		case RIGHT:
		{
			CURSON_POSITION ++;
 868:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <CURSON_POSITION>
 86c:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <CURSON_POSITION+0x1>
 870:	9c 01       	movw	r18, r24
 872:	2f 5f       	subi	r18, 0xFF	; 255
 874:	3f 4f       	sbci	r19, 0xFF	; 255
			if(CURSON_POSITION == 2 || CURSON_POSITION == 5)
 876:	22 30       	cpi	r18, 0x02	; 2
 878:	31 05       	cpc	r19, r1
 87a:	41 f0       	breq	.+16     	; 0x88c <set_cursor+0x62>
 87c:	25 30       	cpi	r18, 0x05	; 5
 87e:	31 05       	cpc	r19, r1
 880:	29 f0       	breq	.+10     	; 0x88c <set_cursor+0x62>
			break;
		}
		
		case RIGHT:
		{
			CURSON_POSITION ++;
 882:	30 93 88 01 	sts	0x0188, r19	; 0x800188 <CURSON_POSITION+0x1>
 886:	20 93 87 01 	sts	0x0187, r18	; 0x800187 <CURSON_POSITION>
 88a:	05 c0       	rjmp	.+10     	; 0x896 <set_cursor+0x6c>
			if(CURSON_POSITION == 2 || CURSON_POSITION == 5)
			{
				CURSON_POSITION ++;
 88c:	02 96       	adiw	r24, 0x02	; 2
 88e:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <CURSON_POSITION+0x1>
 892:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <CURSON_POSITION>
			}
			if(CURSON_POSITION > CP_SECONDS)
 896:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <CURSON_POSITION>
 89a:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <CURSON_POSITION+0x1>
 89e:	08 97       	sbiw	r24, 0x08	; 8
 8a0:	d8 f0       	brcs	.+54     	; 0x8d8 <set_cursor+0xae>
			{
				put_Char_LCD_Display(0x80, 0);
 8a2:	60 e0       	ldi	r22, 0x00	; 0
 8a4:	70 e0       	ldi	r23, 0x00	; 0
 8a6:	80 e8       	ldi	r24, 0x80	; 128
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				put_string("WORKING...");
 8ae:	85 e4       	ldi	r24, 0x45	; 69
 8b0:	91 e0       	ldi	r25, 0x01	; 1
 8b2:	0e 94 82 05 	call	0xb04	; 0xb04 <put_string>
				CURSON_POSITION = CP_HOURS_X_10;
 8b6:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <CURSON_POSITION+0x1>
 8ba:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <CURSON_POSITION>
				BLINK_OFF;
 8be:	60 e0       	ldi	r22, 0x00	; 0
 8c0:	70 e0       	ldi	r23, 0x00	; 0
 8c2:	8c e0       	ldi	r24, 0x0C	; 12
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
				STATE_MACHINE = STATE_WORKING;
 8ca:	84 e0       	ldi	r24, 0x04	; 4
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <__data_end+0x1>
 8d2:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
				UV_CONTROL_ON;
 8d6:	41 9a       	sbi	0x08, 1	; 8
			}
			break;
		}
	}
	display_time();
 8d8:	0e 94 a7 05 	call	0xb4e	; 0xb4e <display_time>
	put_Char_LCD_Display(0xC0 + CURSON_POSITION, 0);
 8dc:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <CURSON_POSITION>
 8e0:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <CURSON_POSITION+0x1>
 8e4:	60 e0       	ldi	r22, 0x00	; 0
 8e6:	70 e0       	ldi	r23, 0x00	; 0
 8e8:	80 54       	subi	r24, 0x40	; 64
 8ea:	9f 4f       	sbci	r25, 0xFF	; 255
 8ec:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
 8f0:	08 95       	ret

000008f2 <init_interrupt_200ms>:

// 10 ms timer
void init_interrupt_200ms()
{
	// Set the Timer Mode to CTC
	TCCR0A |= (1 << WGM01);
 8f2:	84 b5       	in	r24, 0x24	; 36
 8f4:	82 60       	ori	r24, 0x02	; 2
 8f6:	84 bd       	out	0x24, r24	; 36

	// Set the value that you want to count to
	OCR0A = 0x26;
 8f8:	86 e2       	ldi	r24, 0x26	; 38
 8fa:	87 bd       	out	0x27, r24	; 39

	TIMSK0 |= (1 << OCIE0A);    //Set the ISR COMPA vector
 8fc:	ee e6       	ldi	r30, 0x6E	; 110
 8fe:	f0 e0       	ldi	r31, 0x00	; 0
 900:	80 81       	ld	r24, Z
 902:	82 60       	ori	r24, 0x02	; 2
 904:	80 83       	st	Z, r24

	TCCR0B |= (1 << CS02);
 906:	85 b5       	in	r24, 0x25	; 37
 908:	84 60       	ori	r24, 0x04	; 4
 90a:	85 bd       	out	0x25, r24	; 37
 90c:	08 95       	ret

0000090e <__vector_14>:
	// set prescaler to 256 and start the timer
}

ISR (TIMER0_COMPA_vect)  // timer0 overflow interrupt
{
 90e:	1f 92       	push	r1
 910:	0f 92       	push	r0
 912:	0f b6       	in	r0, 0x3f	; 63
 914:	0f 92       	push	r0
 916:	11 24       	eor	r1, r1
 918:	2f 93       	push	r18
 91a:	3f 93       	push	r19
 91c:	4f 93       	push	r20
 91e:	5f 93       	push	r21
 920:	6f 93       	push	r22
 922:	7f 93       	push	r23
 924:	8f 93       	push	r24
 926:	9f 93       	push	r25
 928:	af 93       	push	r26
 92a:	bf 93       	push	r27
 92c:	ef 93       	push	r30
 92e:	ff 93       	push	r31
	//event to be executed every 10ms here
	counter ++;
 930:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter>
 934:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <counter+0x1>
 938:	01 96       	adiw	r24, 0x01	; 1
 93a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <counter+0x1>
 93e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <counter>
	if(BUTTONS_ALLOWED)
 942:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <GLOBAL_BOOL>
 946:	84 ff       	sbrs	r24, 4
 948:	03 c0       	rjmp	.+6      	; 0x950 <__vector_14+0x42>
	{
		read_buttons();
 94a:	0e 94 60 00 	call	0xc0	; 0xc0 <read_buttons>
 94e:	1e c0       	rjmp	.+60     	; 0x98c <__vector_14+0x7e>
	}
	else
	{
		btn_counter ++;
 950:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 954:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 958:	01 96       	adiw	r24, 0x01	; 1
 95a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 95e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		if(btn_counter >= BUTTONS_DELAY)
 962:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 966:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 96a:	42 97       	sbiw	r24, 0x12	; 18
 96c:	78 f0       	brcs	.+30     	; 0x98c <__vector_14+0x7e>
		{
			btn_counter = 1;
 96e:	81 e0       	ldi	r24, 0x01	; 1
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 976:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			BUTTONS_ALLOWED = TRUE;
 97a:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <GLOBAL_BOOL>
 97e:	80 61       	ori	r24, 0x10	; 16
 980:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <GLOBAL_BOOL>
			PRESSED_BUTTON = NO_BUTTON;
 984:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <PRESSED_BUTTON+0x1>
 988:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <PRESSED_BUTTON>
		}
	}
	if(counter >= 99)
 98c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <counter>
 990:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <counter+0x1>
 994:	83 36       	cpi	r24, 0x63	; 99
 996:	91 05       	cpc	r25, r1
 998:	c4 f0       	brlt	.+48     	; 0x9ca <__vector_14+0xbc>
	{
		PORTC ^= 1 << 0;
 99a:	98 b1       	in	r25, 0x08	; 8
 99c:	81 e0       	ldi	r24, 0x01	; 1
 99e:	89 27       	eor	r24, r25
 9a0:	88 b9       	out	0x08, r24	; 8
		counter = 1;
 9a2:	81 e0       	ldi	r24, 0x01	; 1
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <counter+0x1>
 9aa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <counter>
		if(STATE_MACHINE == STATE_WORKING)
 9ae:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__data_end>
 9b2:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <__data_end+0x1>
 9b6:	04 97       	sbiw	r24, 0x04	; 4
 9b8:	21 f4       	brne	.+8      	; 0x9c2 <__vector_14+0xb4>
		{
			display_time();
 9ba:	0e 94 a7 05 	call	0xb4e	; 0xb4e <display_time>
			decrement_clock();
 9be:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <decrement_clock>
		}
		PORTC ^= 1 << 0;
 9c2:	98 b1       	in	r25, 0x08	; 8
 9c4:	81 e0       	ldi	r24, 0x01	; 1
 9c6:	89 27       	eor	r24, r25
 9c8:	88 b9       	out	0x08, r24	; 8
	}
}
 9ca:	ff 91       	pop	r31
 9cc:	ef 91       	pop	r30
 9ce:	bf 91       	pop	r27
 9d0:	af 91       	pop	r26
 9d2:	9f 91       	pop	r25
 9d4:	8f 91       	pop	r24
 9d6:	7f 91       	pop	r23
 9d8:	6f 91       	pop	r22
 9da:	5f 91       	pop	r21
 9dc:	4f 91       	pop	r20
 9de:	3f 91       	pop	r19
 9e0:	2f 91       	pop	r18
 9e2:	0f 90       	pop	r0
 9e4:	0f be       	out	0x3f, r0	; 63
 9e6:	0f 90       	pop	r0
 9e8:	1f 90       	pop	r1
 9ea:	18 95       	reti

000009ec <put_Char_LCD_Display>:
#define LCD_DELAY_MS 2
#define LCD_INIT_DELAY_MS 7

void put_Char_LCD_Display(int ch, int type)
{
	PORTD = (PORTD&0x0F)|(ch&0xF0);
 9ec:	2b b1       	in	r18, 0x0b	; 11
 9ee:	38 2f       	mov	r19, r24
 9f0:	30 7f       	andi	r19, 0xF0	; 240
 9f2:	2f 70       	andi	r18, 0x0F	; 15
 9f4:	23 2b       	or	r18, r19
 9f6:	2b b9       	out	0x0b, r18	; 11
	PORTD = (PORTD&0xFE)|(type&0x01);
 9f8:	2b b1       	in	r18, 0x0b	; 11
 9fa:	61 70       	andi	r22, 0x01	; 1
 9fc:	2e 7f       	andi	r18, 0xFE	; 254
 9fe:	26 2b       	or	r18, r22
 a00:	2b b9       	out	0x0b, r18	; 11
	PORTD = PORTD|0x02;
 a02:	59 9a       	sbi	0x0b, 1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a04:	e3 ef       	ldi	r30, 0xF3	; 243
 a06:	f1 e0       	ldi	r31, 0x01	; 1
 a08:	31 97       	sbiw	r30, 0x01	; 1
 a0a:	f1 f7       	brne	.-4      	; 0xa08 <put_Char_LCD_Display+0x1c>
 a0c:	00 c0       	rjmp	.+0      	; 0xa0e <put_Char_LCD_Display+0x22>
 a0e:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	PORTD &= 0xFC;
 a10:	2b b1       	in	r18, 0x0b	; 11
 a12:	2c 7f       	andi	r18, 0xFC	; 252
 a14:	2b b9       	out	0x0b, r18	; 11
	PORTD = (PORTD&0x0F)|((ch<<4)&0xF0);
 a16:	2b b1       	in	r18, 0x0b	; 11
 a18:	82 95       	swap	r24
 a1a:	92 95       	swap	r25
 a1c:	90 7f       	andi	r25, 0xF0	; 240
 a1e:	98 27       	eor	r25, r24
 a20:	80 7f       	andi	r24, 0xF0	; 240
 a22:	98 27       	eor	r25, r24
 a24:	92 2f       	mov	r25, r18
 a26:	9f 70       	andi	r25, 0x0F	; 15
 a28:	89 2b       	or	r24, r25
 a2a:	8b b9       	out	0x0b, r24	; 11
	PORTD = (PORTD&0xFE)|(type&0x01);
 a2c:	8b b1       	in	r24, 0x0b	; 11
 a2e:	8e 7f       	andi	r24, 0xFE	; 254
 a30:	68 2b       	or	r22, r24
 a32:	6b b9       	out	0x0b, r22	; 11
	PORTD = PORTD|0x02;
 a34:	59 9a       	sbi	0x0b, 1	; 11
 a36:	83 ef       	ldi	r24, 0xF3	; 243
 a38:	91 e0       	ldi	r25, 0x01	; 1
 a3a:	01 97       	sbiw	r24, 0x01	; 1
 a3c:	f1 f7       	brne	.-4      	; 0xa3a <put_Char_LCD_Display+0x4e>
 a3e:	00 c0       	rjmp	.+0      	; 0xa40 <put_Char_LCD_Display+0x54>
 a40:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	PORTD &= 0xFC;
 a42:	8b b1       	in	r24, 0x0b	; 11
 a44:	8c 7f       	andi	r24, 0xFC	; 252
 a46:	8b b9       	out	0x0b, r24	; 11
 a48:	08 95       	ret

00000a4a <init_LCD_Display>:
}

void init_LCD_Display(void)
{
	DDRD = 0xFF;
 a4a:	8f ef       	ldi	r24, 0xFF	; 255
 a4c:	8a b9       	out	0x0a, r24	; 10
	put_Char_LCD_Display(0x38,0);
 a4e:	60 e0       	ldi	r22, 0x00	; 0
 a50:	70 e0       	ldi	r23, 0x00	; 0
 a52:	88 e3       	ldi	r24, 0x38	; 56
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
 a5a:	85 ed       	ldi	r24, 0xD5	; 213
 a5c:	96 e0       	ldi	r25, 0x06	; 6
 a5e:	01 97       	sbiw	r24, 0x01	; 1
 a60:	f1 f7       	brne	.-4      	; 0xa5e <init_LCD_Display+0x14>
 a62:	00 c0       	rjmp	.+0      	; 0xa64 <init_LCD_Display+0x1a>
 a64:	00 00       	nop
	_delay_ms(LCD_INIT_DELAY_MS);
	put_Char_LCD_Display(0x38,0);
 a66:	60 e0       	ldi	r22, 0x00	; 0
 a68:	70 e0       	ldi	r23, 0x00	; 0
 a6a:	88 e3       	ldi	r24, 0x38	; 56
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
 a72:	85 ed       	ldi	r24, 0xD5	; 213
 a74:	96 e0       	ldi	r25, 0x06	; 6
 a76:	01 97       	sbiw	r24, 0x01	; 1
 a78:	f1 f7       	brne	.-4      	; 0xa76 <init_LCD_Display+0x2c>
 a7a:	00 c0       	rjmp	.+0      	; 0xa7c <init_LCD_Display+0x32>
 a7c:	00 00       	nop
	_delay_ms(LCD_INIT_DELAY_MS);
	put_Char_LCD_Display(0x38,0);
 a7e:	60 e0       	ldi	r22, 0x00	; 0
 a80:	70 e0       	ldi	r23, 0x00	; 0
 a82:	88 e3       	ldi	r24, 0x38	; 56
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
 a8a:	85 ed       	ldi	r24, 0xD5	; 213
 a8c:	96 e0       	ldi	r25, 0x06	; 6
 a8e:	01 97       	sbiw	r24, 0x01	; 1
 a90:	f1 f7       	brne	.-4      	; 0xa8e <init_LCD_Display+0x44>
 a92:	00 c0       	rjmp	.+0      	; 0xa94 <init_LCD_Display+0x4a>
 a94:	00 00       	nop
	_delay_ms(LCD_INIT_DELAY_MS);
	put_Char_LCD_Display(0x02,0);
 a96:	60 e0       	ldi	r22, 0x00	; 0
 a98:	70 e0       	ldi	r23, 0x00	; 0
 a9a:	82 e0       	ldi	r24, 0x02	; 2
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
 aa2:	85 ed       	ldi	r24, 0xD5	; 213
 aa4:	96 e0       	ldi	r25, 0x06	; 6
 aa6:	01 97       	sbiw	r24, 0x01	; 1
 aa8:	f1 f7       	brne	.-4      	; 0xaa6 <init_LCD_Display+0x5c>
 aaa:	00 c0       	rjmp	.+0      	; 0xaac <init_LCD_Display+0x62>
 aac:	00 00       	nop
	_delay_ms(LCD_INIT_DELAY_MS);
	put_Char_LCD_Display(0x0C,0);
 aae:	60 e0       	ldi	r22, 0x00	; 0
 ab0:	70 e0       	ldi	r23, 0x00	; 0
 ab2:	8c e0       	ldi	r24, 0x0C	; 12
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
 aba:	85 ed       	ldi	r24, 0xD5	; 213
 abc:	96 e0       	ldi	r25, 0x06	; 6
 abe:	01 97       	sbiw	r24, 0x01	; 1
 ac0:	f1 f7       	brne	.-4      	; 0xabe <init_LCD_Display+0x74>
 ac2:	00 c0       	rjmp	.+0      	; 0xac4 <init_LCD_Display+0x7a>
 ac4:	00 00       	nop
	_delay_ms(LCD_INIT_DELAY_MS);
	put_Char_LCD_Display(0x01,0);
 ac6:	60 e0       	ldi	r22, 0x00	; 0
 ac8:	70 e0       	ldi	r23, 0x00	; 0
 aca:	81 e0       	ldi	r24, 0x01	; 1
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
 ad2:	85 ed       	ldi	r24, 0xD5	; 213
 ad4:	96 e0       	ldi	r25, 0x06	; 6
 ad6:	01 97       	sbiw	r24, 0x01	; 1
 ad8:	f1 f7       	brne	.-4      	; 0xad6 <init_LCD_Display+0x8c>
 ada:	00 c0       	rjmp	.+0      	; 0xadc <init_LCD_Display+0x92>
 adc:	00 00       	nop
	_delay_ms(LCD_INIT_DELAY_MS);
	put_Char_LCD_Display(0x80,0);
 ade:	60 e0       	ldi	r22, 0x00	; 0
 ae0:	70 e0       	ldi	r23, 0x00	; 0
 ae2:	80 e8       	ldi	r24, 0x80	; 128
 ae4:	90 e0       	ldi	r25, 0x00	; 0
 ae6:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
 aea:	85 ed       	ldi	r24, 0xD5	; 213
 aec:	96 e0       	ldi	r25, 0x06	; 6
 aee:	01 97       	sbiw	r24, 0x01	; 1
 af0:	f1 f7       	brne	.-4      	; 0xaee <init_LCD_Display+0xa4>
 af2:	00 c0       	rjmp	.+0      	; 0xaf4 <init_LCD_Display+0xaa>
 af4:	00 00       	nop
	_delay_ms(LCD_INIT_DELAY_MS);
	put_Char_LCD_Display(0x01,0);//clear display
 af6:	60 e0       	ldi	r22, 0x00	; 0
 af8:	70 e0       	ldi	r23, 0x00	; 0
 afa:	81 e0       	ldi	r24, 0x01	; 1
 afc:	90 e0       	ldi	r25, 0x00	; 0
 afe:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
 b02:	08 95       	ret

00000b04 <put_string>:
}

// display string
void put_string(const char *_string)
{
 b04:	ef 92       	push	r14
 b06:	ff 92       	push	r15
 b08:	0f 93       	push	r16
 b0a:	1f 93       	push	r17
 b0c:	cf 93       	push	r28
 b0e:	df 93       	push	r29
 b10:	8c 01       	movw	r16, r24
 b12:	7c 01       	movw	r14, r24
	int ch_index;
	for(ch_index=0;ch_index<strlen(_string);ch_index++)
 b14:	c0 e0       	ldi	r28, 0x00	; 0
 b16:	d0 e0       	ldi	r29, 0x00	; 0
 b18:	09 c0       	rjmp	.+18     	; 0xb2c <put_string+0x28>
	{
		put_Char_LCD_Display(_string[ch_index], 1);
 b1a:	f7 01       	movw	r30, r14
 b1c:	81 91       	ld	r24, Z+
 b1e:	7f 01       	movw	r14, r30
 b20:	61 e0       	ldi	r22, 0x01	; 1
 b22:	70 e0       	ldi	r23, 0x00	; 0
 b24:	90 e0       	ldi	r25, 0x00	; 0
 b26:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>

// display string
void put_string(const char *_string)
{
	int ch_index;
	for(ch_index=0;ch_index<strlen(_string);ch_index++)
 b2a:	21 96       	adiw	r28, 0x01	; 1
 b2c:	f8 01       	movw	r30, r16
 b2e:	01 90       	ld	r0, Z+
 b30:	00 20       	and	r0, r0
 b32:	e9 f7       	brne	.-6      	; 0xb2e <put_string+0x2a>
 b34:	31 97       	sbiw	r30, 0x01	; 1
 b36:	e0 1b       	sub	r30, r16
 b38:	f1 0b       	sbc	r31, r17
 b3a:	ce 17       	cp	r28, r30
 b3c:	df 07       	cpc	r29, r31
 b3e:	68 f3       	brcs	.-38     	; 0xb1a <put_string+0x16>
	{
		put_Char_LCD_Display(_string[ch_index], 1);
	}
}
 b40:	df 91       	pop	r29
 b42:	cf 91       	pop	r28
 b44:	1f 91       	pop	r17
 b46:	0f 91       	pop	r16
 b48:	ff 90       	pop	r15
 b4a:	ef 90       	pop	r14
 b4c:	08 95       	ret

00000b4e <display_time>:

void display_time()
{
 b4e:	0f 93       	push	r16
 b50:	1f 93       	push	r17
 b52:	cf 93       	push	r28
 b54:	df 93       	push	r29
	put_Char_LCD_Display(0xC0, 0);
 b56:	60 e0       	ldi	r22, 0x00	; 0
 b58:	70 e0       	ldi	r23, 0x00	; 0
 b5a:	80 ec       	ldi	r24, 0xC0	; 192
 b5c:	90 e0       	ldi	r25, 0x00	; 0
 b5e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.H/10, 1);
 b62:	c1 e8       	ldi	r28, 0x81	; 129
 b64:	d1 e0       	ldi	r29, 0x01	; 1
 b66:	88 81       	ld	r24, Y
 b68:	99 81       	ldd	r25, Y+1	; 0x01
 b6a:	0a e0       	ldi	r16, 0x0A	; 10
 b6c:	10 e0       	ldi	r17, 0x00	; 0
 b6e:	b8 01       	movw	r22, r16
 b70:	0e 94 a3 06 	call	0xd46	; 0xd46 <__divmodhi4>
 b74:	cb 01       	movw	r24, r22
 b76:	61 e0       	ldi	r22, 0x01	; 1
 b78:	70 e0       	ldi	r23, 0x00	; 0
 b7a:	c0 96       	adiw	r24, 0x30	; 48
 b7c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.H%10, 1);
 b80:	88 81       	ld	r24, Y
 b82:	99 81       	ldd	r25, Y+1	; 0x01
 b84:	b8 01       	movw	r22, r16
 b86:	0e 94 a3 06 	call	0xd46	; 0xd46 <__divmodhi4>
 b8a:	61 e0       	ldi	r22, 0x01	; 1
 b8c:	70 e0       	ldi	r23, 0x00	; 0
 b8e:	c0 96       	adiw	r24, 0x30	; 48
 b90:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
	put_Char_LCD_Display(':', 1);
 b94:	61 e0       	ldi	r22, 0x01	; 1
 b96:	70 e0       	ldi	r23, 0x00	; 0
 b98:	8a e3       	ldi	r24, 0x3A	; 58
 b9a:	90 e0       	ldi	r25, 0x00	; 0
 b9c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.M/10, 1);
 ba0:	8a 81       	ldd	r24, Y+2	; 0x02
 ba2:	9b 81       	ldd	r25, Y+3	; 0x03
 ba4:	b8 01       	movw	r22, r16
 ba6:	0e 94 a3 06 	call	0xd46	; 0xd46 <__divmodhi4>
 baa:	cb 01       	movw	r24, r22
 bac:	61 e0       	ldi	r22, 0x01	; 1
 bae:	70 e0       	ldi	r23, 0x00	; 0
 bb0:	c0 96       	adiw	r24, 0x30	; 48
 bb2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.M%10, 1);
 bb6:	8a 81       	ldd	r24, Y+2	; 0x02
 bb8:	9b 81       	ldd	r25, Y+3	; 0x03
 bba:	b8 01       	movw	r22, r16
 bbc:	0e 94 a3 06 	call	0xd46	; 0xd46 <__divmodhi4>
 bc0:	61 e0       	ldi	r22, 0x01	; 1
 bc2:	70 e0       	ldi	r23, 0x00	; 0
 bc4:	c0 96       	adiw	r24, 0x30	; 48
 bc6:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
	put_Char_LCD_Display(':', 1);
 bca:	61 e0       	ldi	r22, 0x01	; 1
 bcc:	70 e0       	ldi	r23, 0x00	; 0
 bce:	8a e3       	ldi	r24, 0x3A	; 58
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.S/10, 1);
 bd6:	8c 81       	ldd	r24, Y+4	; 0x04
 bd8:	9d 81       	ldd	r25, Y+5	; 0x05
 bda:	b8 01       	movw	r22, r16
 bdc:	0e 94 a3 06 	call	0xd46	; 0xd46 <__divmodhi4>
 be0:	cb 01       	movw	r24, r22
 be2:	61 e0       	ldi	r22, 0x01	; 1
 be4:	70 e0       	ldi	r23, 0x00	; 0
 be6:	c0 96       	adiw	r24, 0x30	; 48
 be8:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.S%10, 1);
 bec:	8c 81       	ldd	r24, Y+4	; 0x04
 bee:	9d 81       	ldd	r25, Y+5	; 0x05
 bf0:	b8 01       	movw	r22, r16
 bf2:	0e 94 a3 06 	call	0xd46	; 0xd46 <__divmodhi4>
 bf6:	61 e0       	ldi	r22, 0x01	; 1
 bf8:	70 e0       	ldi	r23, 0x00	; 0
 bfa:	c0 96       	adiw	r24, 0x30	; 48
 bfc:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
}
 c00:	df 91       	pop	r29
 c02:	cf 91       	pop	r28
 c04:	1f 91       	pop	r17
 c06:	0f 91       	pop	r16
 c08:	08 95       	ret

00000c0a <UV_control_init>:
#include "IPX_UV_light_control.h"
#include <avr/io.h>

void UV_control_init()
{
	UV_CONTROL_DDR |= 1 << UV_CONTROL_PIN;
 c0a:	39 9a       	sbi	0x07, 1	; 7
	UV_CONTROL_OFF;
 c0c:	41 98       	cbi	0x08, 1	; 8
 c0e:	08 95       	ret

00000c10 <main>:

int main(void)
{
    /* Replace with your application code */

	DDRC |= 1 << 0;   // LED
 c10:	38 9a       	sbi	0x07, 0	; 7
	PORTC |= 1 << 0;  // LED
 c12:	40 9a       	sbi	0x08, 0	; 8
	
	STATE_MACHINE = STATE_INIT;
 c14:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <__data_end+0x1>
 c18:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <__data_end>
	PRESSED_BUTTON = NO_BUTTON;
 c1c:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <PRESSED_BUTTON+0x1>
 c20:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <PRESSED_BUTTON>
	BUTTONS_ALLOWED = TRUE;
 c24:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <GLOBAL_BOOL>
 c28:	80 61       	ori	r24, 0x10	; 16
 c2a:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <GLOBAL_BOOL>
	
	CLOCK.H = 0;
 c2e:	e1 e8       	ldi	r30, 0x81	; 129
 c30:	f1 e0       	ldi	r31, 0x01	; 1
 c32:	11 82       	std	Z+1, r1	; 0x01
 c34:	10 82       	st	Z, r1
	CLOCK.M = 0;
 c36:	13 82       	std	Z+3, r1	; 0x03
 c38:	12 82       	std	Z+2, r1	; 0x02
	CLOCK.S = 0;
 c3a:	15 82       	std	Z+5, r1	; 0x05
 c3c:	14 82       	std	Z+4, r1	; 0x04
	
	CURSON_POSITION = CP_HOURS_X_10;
 c3e:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <CURSON_POSITION+0x1>
 c42:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <CURSON_POSITION>
	
	UV_control_init();
 c46:	0e 94 05 06 	call	0xc0a	; 0xc0a <UV_control_init>
	init_buttons();
 c4a:	0e 94 53 00 	call	0xa6	; 0xa6 <init_buttons>
	init_interrupt_200ms();
 c4e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <init_interrupt_200ms>
 c52:	2f e7       	ldi	r18, 0x7F	; 127
 c54:	89 ea       	ldi	r24, 0xA9	; 169
 c56:	93 e0       	ldi	r25, 0x03	; 3
 c58:	21 50       	subi	r18, 0x01	; 1
 c5a:	80 40       	sbci	r24, 0x00	; 0
 c5c:	90 40       	sbci	r25, 0x00	; 0
 c5e:	e1 f7       	brne	.-8      	; 0xc58 <main+0x48>
 c60:	00 c0       	rjmp	.+0      	; 0xc62 <main+0x52>
 c62:	00 00       	nop
	
	_delay_ms(1200);
	
	init_LCD_Display();
 c64:	0e 94 25 05 	call	0xa4a	; 0xa4a <init_LCD_Display>
 c68:	2f e7       	ldi	r18, 0x7F	; 127
 c6a:	89 ea       	ldi	r24, 0xA9	; 169
 c6c:	93 e0       	ldi	r25, 0x03	; 3
 c6e:	21 50       	subi	r18, 0x01	; 1
 c70:	80 40       	sbci	r24, 0x00	; 0
 c72:	90 40       	sbci	r25, 0x00	; 0
 c74:	e1 f7       	brne	.-8      	; 0xc6e <main+0x5e>
 c76:	00 c0       	rjmp	.+0      	; 0xc78 <main+0x68>
 c78:	00 00       	nop
	
	_delay_ms(1200);
	
	put_string("Initializing...");
 c7a:	80 e5       	ldi	r24, 0x50	; 80
 c7c:	91 e0       	ldi	r25, 0x01	; 1
 c7e:	0e 94 82 05 	call	0xb04	; 0xb04 <put_string>
 c82:	2f e3       	ldi	r18, 0x3F	; 63
 c84:	8d e0       	ldi	r24, 0x0D	; 13
 c86:	93 e0       	ldi	r25, 0x03	; 3
 c88:	21 50       	subi	r18, 0x01	; 1
 c8a:	80 40       	sbci	r24, 0x00	; 0
 c8c:	90 40       	sbci	r25, 0x00	; 0
 c8e:	e1 f7       	brne	.-8      	; 0xc88 <main+0x78>
 c90:	00 c0       	rjmp	.+0      	; 0xc92 <main+0x82>
 c92:	00 00       	nop
	
	_delay_ms(1000);
	clear_display();
 c94:	60 e0       	ldi	r22, 0x00	; 0
 c96:	70 e0       	ldi	r23, 0x00	; 0
 c98:	81 e0       	ldi	r24, 0x01	; 1
 c9a:	90 e0       	ldi	r25, 0x00	; 0
 c9c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
	
	STATE_MACHINE = STATE_WELCOME;
 ca0:	81 e0       	ldi	r24, 0x01	; 1
 ca2:	90 e0       	ldi	r25, 0x00	; 0
 ca4:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <__data_end+0x1>
 ca8:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
	
	put_Char_LCD_Display(0x80, 0);
 cac:	60 e0       	ldi	r22, 0x00	; 0
 cae:	70 e0       	ldi	r23, 0x00	; 0
 cb0:	80 e8       	ldi	r24, 0x80	; 128
 cb2:	90 e0       	ldi	r25, 0x00	; 0
 cb4:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
	put_string("ScorpionIPX");
 cb8:	80 e6       	ldi	r24, 0x60	; 96
 cba:	91 e0       	ldi	r25, 0x01	; 1
 cbc:	0e 94 82 05 	call	0xb04	; 0xb04 <put_string>
	
	put_Char_LCD_Display(0xC0, 0);
 cc0:	60 e0       	ldi	r22, 0x00	; 0
 cc2:	70 e0       	ldi	r23, 0x00	; 0
 cc4:	80 ec       	ldi	r24, 0xC0	; 192
 cc6:	90 e0       	ldi	r25, 0x00	; 0
 cc8:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
	put_string("UV LampBox v1.0");
 ccc:	8c e6       	ldi	r24, 0x6C	; 108
 cce:	91 e0       	ldi	r25, 0x01	; 1
 cd0:	0e 94 82 05 	call	0xb04	; 0xb04 <put_string>
 cd4:	2f e7       	ldi	r18, 0x7F	; 127
 cd6:	8a e1       	ldi	r24, 0x1A	; 26
 cd8:	96 e0       	ldi	r25, 0x06	; 6
 cda:	21 50       	subi	r18, 0x01	; 1
 cdc:	80 40       	sbci	r24, 0x00	; 0
 cde:	90 40       	sbci	r25, 0x00	; 0
 ce0:	e1 f7       	brne	.-8      	; 0xcda <main+0xca>
 ce2:	00 c0       	rjmp	.+0      	; 0xce4 <main+0xd4>
 ce4:	00 00       	nop
	
	_delay_ms(2000);
	PORTC &= ~(1 << 0);
 ce6:	40 98       	cbi	0x08, 0	; 8
	clear_display();
 ce8:	60 e0       	ldi	r22, 0x00	; 0
 cea:	70 e0       	ldi	r23, 0x00	; 0
 cec:	81 e0       	ldi	r24, 0x01	; 1
 cee:	90 e0       	ldi	r25, 0x00	; 0
 cf0:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
	
	STATE_MACHINE = STATE_SETTINGS;
 cf4:	83 e0       	ldi	r24, 0x03	; 3
 cf6:	90 e0       	ldi	r25, 0x00	; 0
 cf8:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <__data_end+0x1>
 cfc:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <__data_end>
	BLINK_ON;
 d00:	60 e0       	ldi	r22, 0x00	; 0
 d02:	70 e0       	ldi	r23, 0x00	; 0
 d04:	8d e0       	ldi	r24, 0x0D	; 13
 d06:	90 e0       	ldi	r25, 0x00	; 0
 d08:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
	put_Char_LCD_Display(0x80, 0);
 d0c:	60 e0       	ldi	r22, 0x00	; 0
 d0e:	70 e0       	ldi	r23, 0x00	; 0
 d10:	80 e8       	ldi	r24, 0x80	; 128
 d12:	90 e0       	ldi	r25, 0x00	; 0
 d14:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
	put_string("SET TIME:");
 d18:	84 e0       	ldi	r24, 0x04	; 4
 d1a:	91 e0       	ldi	r25, 0x01	; 1
 d1c:	0e 94 82 05 	call	0xb04	; 0xb04 <put_string>
	
	display_time();
 d20:	0e 94 a7 05 	call	0xb4e	; 0xb4e <display_time>
	put_Char_LCD_Display(0xC0, 0);
 d24:	60 e0       	ldi	r22, 0x00	; 0
 d26:	70 e0       	ldi	r23, 0x00	; 0
 d28:	80 ec       	ldi	r24, 0xC0	; 192
 d2a:	90 e0       	ldi	r25, 0x00	; 0
 d2c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <put_Char_LCD_Display>
 d30:	2f e3       	ldi	r18, 0x3F	; 63
 d32:	8d e0       	ldi	r24, 0x0D	; 13
 d34:	93 e0       	ldi	r25, 0x03	; 3
 d36:	21 50       	subi	r18, 0x01	; 1
 d38:	80 40       	sbci	r24, 0x00	; 0
 d3a:	90 40       	sbci	r25, 0x00	; 0
 d3c:	e1 f7       	brne	.-8      	; 0xd36 <main+0x126>
 d3e:	00 c0       	rjmp	.+0      	; 0xd40 <main+0x130>
 d40:	00 00       	nop
	_delay_ms(1000);
	
	sei();
 d42:	78 94       	sei
	
    while (1) 
    {
			
    }
 d44:	ff cf       	rjmp	.-2      	; 0xd44 <main+0x134>

00000d46 <__divmodhi4>:
 d46:	97 fb       	bst	r25, 7
 d48:	07 2e       	mov	r0, r23
 d4a:	16 f4       	brtc	.+4      	; 0xd50 <__divmodhi4+0xa>
 d4c:	00 94       	com	r0
 d4e:	07 d0       	rcall	.+14     	; 0xd5e <__divmodhi4_neg1>
 d50:	77 fd       	sbrc	r23, 7
 d52:	09 d0       	rcall	.+18     	; 0xd66 <__divmodhi4_neg2>
 d54:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__udivmodhi4>
 d58:	07 fc       	sbrc	r0, 7
 d5a:	05 d0       	rcall	.+10     	; 0xd66 <__divmodhi4_neg2>
 d5c:	3e f4       	brtc	.+14     	; 0xd6c <__divmodhi4_exit>

00000d5e <__divmodhi4_neg1>:
 d5e:	90 95       	com	r25
 d60:	81 95       	neg	r24
 d62:	9f 4f       	sbci	r25, 0xFF	; 255
 d64:	08 95       	ret

00000d66 <__divmodhi4_neg2>:
 d66:	70 95       	com	r23
 d68:	61 95       	neg	r22
 d6a:	7f 4f       	sbci	r23, 0xFF	; 255

00000d6c <__divmodhi4_exit>:
 d6c:	08 95       	ret

00000d6e <__udivmodhi4>:
 d6e:	aa 1b       	sub	r26, r26
 d70:	bb 1b       	sub	r27, r27
 d72:	51 e1       	ldi	r21, 0x11	; 17
 d74:	07 c0       	rjmp	.+14     	; 0xd84 <__udivmodhi4_ep>

00000d76 <__udivmodhi4_loop>:
 d76:	aa 1f       	adc	r26, r26
 d78:	bb 1f       	adc	r27, r27
 d7a:	a6 17       	cp	r26, r22
 d7c:	b7 07       	cpc	r27, r23
 d7e:	10 f0       	brcs	.+4      	; 0xd84 <__udivmodhi4_ep>
 d80:	a6 1b       	sub	r26, r22
 d82:	b7 0b       	sbc	r27, r23

00000d84 <__udivmodhi4_ep>:
 d84:	88 1f       	adc	r24, r24
 d86:	99 1f       	adc	r25, r25
 d88:	5a 95       	dec	r21
 d8a:	a9 f7       	brne	.-22     	; 0xd76 <__udivmodhi4_loop>
 d8c:	80 95       	com	r24
 d8e:	90 95       	com	r25
 d90:	bc 01       	movw	r22, r24
 d92:	cd 01       	movw	r24, r26
 d94:	08 95       	ret

00000d96 <_exit>:
 d96:	f8 94       	cli

00000d98 <__stop_program>:
 d98:	ff cf       	rjmp	.-2      	; 0xd98 <__stop_program>
