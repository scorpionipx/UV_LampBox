
UV_LampBox.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  0000065a  000006ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000065a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800134  00800134  00000722  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000722  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000754  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001784  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b26  00000000  00000000  00002000  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000995  00000000  00000000  00002b26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  000034bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000545  00000000  00000000  00003658  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000203  00000000  00000000  00003b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003da0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e5       	ldi	r30, 0x5A	; 90
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 33       	cpi	r26, 0x34	; 52
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e3       	ldi	r26, 0x34	; 52
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 33       	cpi	r26, 0x3F	; 63
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9f 02 	call	0x53e	; 0x53e <main>
  9e:	0c 94 2b 03 	jmp	0x656	; 0x656 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_buttons>:
#include "Global.h"
#include "IPX_Buttons.h"

void init_buttons()
{
	BUTTONS_DDR &= ~(1 << BUTTON_1_PIN | 1 << BUTTON_2_PIN | 1 << BUTTON_3_PIN | 1 << BUTTON_4_PIN);
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	83 7c       	andi	r24, 0xC3	; 195
  aa:	87 b9       	out	0x07, r24	; 7
	BUTTONS_PORT &= ~(1 << BUTTON_1_PIN | 1 << BUTTON_2_PIN | 1 << BUTTON_3_PIN | 1 << BUTTON_4_PIN);
  ac:	88 b1       	in	r24, 0x08	; 8
  ae:	83 7c       	andi	r24, 0xC3	; 195
  b0:	88 b9       	out	0x08, r24	; 8
	
	BUTTON_1_PRESSED = FALSE;
  b2:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <GLOBAL_BOOL>
	BUTTON_2_PRESSED = FALSE;
	BUTTON_3_PRESSED = FALSE;
	BUTTON_4_PRESSED = FALSE;
  b6:	88 7f       	andi	r24, 0xF8	; 248
  b8:	87 7f       	andi	r24, 0xF7	; 247
  ba:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <GLOBAL_BOOL>
  be:	08 95       	ret

000000c0 <read_buttons>:
}

void read_buttons()
{
	BUTTON_1_PRESSED = BUTTON_1_VALUE;
  c0:	96 b1       	in	r25, 0x06	; 6
  c2:	96 95       	lsr	r25
  c4:	96 95       	lsr	r25
  c6:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <GLOBAL_BOOL>
  ca:	90 fb       	bst	r25, 0
  cc:	80 f9       	bld	r24, 0
  ce:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <GLOBAL_BOOL>
	if(BUTTON_1_PRESSED)
  d2:	80 ff       	sbrs	r24, 0
  d4:	07 c0       	rjmp	.+14     	; 0xe4 <read_buttons+0x24>
	{
		PRESSED_BUTTON = BUTTON_1;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <PRESSED_BUTTON+0x1>
  de:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <PRESSED_BUTTON>
		return;
  e2:	08 95       	ret
	}
	
	BUTTON_2_PRESSED = BUTTON_2_VALUE;
  e4:	96 b1       	in	r25, 0x06	; 6
  e6:	96 95       	lsr	r25
  e8:	96 95       	lsr	r25
  ea:	96 95       	lsr	r25
  ec:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <GLOBAL_BOOL>
  f0:	90 fb       	bst	r25, 0
  f2:	81 f9       	bld	r24, 1
  f4:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <GLOBAL_BOOL>
	if(BUTTON_2_PRESSED)
  f8:	81 ff       	sbrs	r24, 1
  fa:	07 c0       	rjmp	.+14     	; 0x10a <read_buttons+0x4a>
	{
		PRESSED_BUTTON = BUTTON_2;
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <PRESSED_BUTTON+0x1>
 104:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <PRESSED_BUTTON>
		return;
 108:	08 95       	ret
	}
	
	BUTTON_3_PRESSED = BUTTON_3_VALUE;
 10a:	96 b1       	in	r25, 0x06	; 6
 10c:	92 95       	swap	r25
 10e:	9f 70       	andi	r25, 0x0F	; 15
 110:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <GLOBAL_BOOL>
 114:	90 fb       	bst	r25, 0
 116:	82 f9       	bld	r24, 2
 118:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <GLOBAL_BOOL>
	if(BUTTON_3_PRESSED)
 11c:	82 ff       	sbrs	r24, 2
 11e:	07 c0       	rjmp	.+14     	; 0x12e <read_buttons+0x6e>
	{
		PRESSED_BUTTON = BUTTON_3;
 120:	83 e0       	ldi	r24, 0x03	; 3
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <PRESSED_BUTTON+0x1>
 128:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <PRESSED_BUTTON>
		return;
 12c:	08 95       	ret
	}
	
	BUTTON_4_PRESSED = BUTTON_4_VALUE;
 12e:	96 b1       	in	r25, 0x06	; 6
 130:	92 95       	swap	r25
 132:	96 95       	lsr	r25
 134:	97 70       	andi	r25, 0x07	; 7
 136:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <GLOBAL_BOOL>
 13a:	90 fb       	bst	r25, 0
 13c:	83 f9       	bld	r24, 3
 13e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <GLOBAL_BOOL>
	if(BUTTON_4_PRESSED)
 142:	83 ff       	sbrs	r24, 3
 144:	07 c0       	rjmp	.+14     	; 0x154 <read_buttons+0x94>
	{
		PRESSED_BUTTON = BUTTON_4;
 146:	84 e0       	ldi	r24, 0x04	; 4
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <PRESSED_BUTTON+0x1>
 14e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <PRESSED_BUTTON>
		return;
 152:	08 95       	ret
	}
	
	PRESSED_BUTTON = NO_BUTTON;
 154:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <PRESSED_BUTTON+0x1>
 158:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <PRESSED_BUTTON>
 15c:	08 95       	ret

0000015e <decrement_clock>:

#include "Global.h"

void decrement_clock()
{
	if(CLOCK.S >= 1)
 15e:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <CLOCK+0x4>
 162:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <CLOCK+0x5>
 166:	00 97       	sbiw	r24, 0x00	; 0
 168:	31 f0       	breq	.+12     	; 0x176 <decrement_clock+0x18>
	{
		CLOCK.S --;
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <CLOCK+0x5>
 170:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <CLOCK+0x4>
 174:	08 95       	ret
	}
	else
	{
		CLOCK.S = 59;
 176:	e9 e3       	ldi	r30, 0x39	; 57
 178:	f1 e0       	ldi	r31, 0x01	; 1
 17a:	8b e3       	ldi	r24, 0x3B	; 59
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	95 83       	std	Z+5, r25	; 0x05
 180:	84 83       	std	Z+4, r24	; 0x04
		if(CLOCK.M >= 1)
 182:	82 81       	ldd	r24, Z+2	; 0x02
 184:	93 81       	ldd	r25, Z+3	; 0x03
 186:	00 97       	sbiw	r24, 0x00	; 0
 188:	31 f0       	breq	.+12     	; 0x196 <decrement_clock+0x38>
		{
			CLOCK.M --;
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <CLOCK+0x3>
 190:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <CLOCK+0x2>
 194:	08 95       	ret
		}
		else
		{
			CLOCK.M = 59;
 196:	e9 e3       	ldi	r30, 0x39	; 57
 198:	f1 e0       	ldi	r31, 0x01	; 1
 19a:	8b e3       	ldi	r24, 0x3B	; 59
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	93 83       	std	Z+3, r25	; 0x03
 1a0:	82 83       	std	Z+2, r24	; 0x02
			if(CLOCK.H >= 1)
 1a2:	80 81       	ld	r24, Z
 1a4:	91 81       	ldd	r25, Z+1	; 0x01
 1a6:	00 97       	sbiw	r24, 0x00	; 0
 1a8:	29 f0       	breq	.+10     	; 0x1b4 <decrement_clock+0x56>
			{
				CLOCK.H --;
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <CLOCK+0x1>
 1b0:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <CLOCK>
 1b4:	08 95       	ret

000001b6 <init_interrupt_200ms>:

// 10 ms timer
void init_interrupt_200ms()
{
	// Set the Timer Mode to CTC
	TCCR0A |= (1 << WGM01);
 1b6:	84 b5       	in	r24, 0x24	; 36
 1b8:	82 60       	ori	r24, 0x02	; 2
 1ba:	84 bd       	out	0x24, r24	; 36

	// Set the value that you want to count to
	OCR0A = 0x26;
 1bc:	86 e2       	ldi	r24, 0x26	; 38
 1be:	87 bd       	out	0x27, r24	; 39

	TIMSK0 |= (1 << OCIE0A);    //Set the ISR COMPA vector
 1c0:	ee e6       	ldi	r30, 0x6E	; 110
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	82 60       	ori	r24, 0x02	; 2
 1c8:	80 83       	st	Z, r24

	TCCR0B |= (1 << CS02);
 1ca:	85 b5       	in	r24, 0x25	; 37
 1cc:	84 60       	ori	r24, 0x04	; 4
 1ce:	85 bd       	out	0x25, r24	; 37
 1d0:	08 95       	ret

000001d2 <__vector_14>:
	// set prescaler to 256 and start the timer
}

ISR (TIMER0_COMPA_vect)  // timer0 overflow interrupt
{
 1d2:	1f 92       	push	r1
 1d4:	0f 92       	push	r0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	2f 93       	push	r18
 1de:	3f 93       	push	r19
 1e0:	4f 93       	push	r20
 1e2:	5f 93       	push	r21
 1e4:	6f 93       	push	r22
 1e6:	7f 93       	push	r23
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
 1ec:	af 93       	push	r26
 1ee:	bf 93       	push	r27
 1f0:	ef 93       	push	r30
 1f2:	ff 93       	push	r31
	//event to be executed every 10ms here
	counter ++;
 1f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 202:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	if(counter >= 100)
 206:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 20a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 20e:	84 36       	cpi	r24, 0x64	; 100
 210:	91 05       	cpc	r25, r1
 212:	64 f0       	brlt	.+24     	; 0x22c <__vector_14+0x5a>
	{
		counter = 1;
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 21c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		//PORTC ^= 1 << 0;
		decrement_clock();
 220:	0e 94 af 00 	call	0x15e	; 0x15e <decrement_clock>
		display_time();
 224:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <display_time>
		read_buttons();
 228:	0e 94 60 00 	call	0xc0	; 0xc0 <read_buttons>
	}
}
 22c:	ff 91       	pop	r31
 22e:	ef 91       	pop	r30
 230:	bf 91       	pop	r27
 232:	af 91       	pop	r26
 234:	9f 91       	pop	r25
 236:	8f 91       	pop	r24
 238:	7f 91       	pop	r23
 23a:	6f 91       	pop	r22
 23c:	5f 91       	pop	r21
 23e:	4f 91       	pop	r20
 240:	3f 91       	pop	r19
 242:	2f 91       	pop	r18
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <put_Char_LCD_Display>:
#define MAX_CHARS_PER_ROW 16
#define LCD_DELAY_MS 10

void put_Char_LCD_Display(int ch, int type)
{
	PORTD = (PORTD&0x0F)|(ch&0xF0);
 24e:	2b b1       	in	r18, 0x0b	; 11
 250:	38 2f       	mov	r19, r24
 252:	30 7f       	andi	r19, 0xF0	; 240
 254:	2f 70       	andi	r18, 0x0F	; 15
 256:	23 2b       	or	r18, r19
 258:	2b b9       	out	0x0b, r18	; 11
	PORTD = (PORTD&0xFE)|(type&0x01);
 25a:	2b b1       	in	r18, 0x0b	; 11
 25c:	61 70       	andi	r22, 0x01	; 1
 25e:	2e 7f       	andi	r18, 0xFE	; 254
 260:	26 2b       	or	r18, r22
 262:	2b b9       	out	0x0b, r18	; 11
	PORTD = PORTD|0x02;
 264:	59 9a       	sbi	0x0b, 1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 266:	e3 ec       	ldi	r30, 0xC3	; 195
 268:	f9 e0       	ldi	r31, 0x09	; 9
 26a:	31 97       	sbiw	r30, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <put_Char_LCD_Display+0x1c>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <put_Char_LCD_Display+0x22>
 270:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	PORTD &= 0xFC;
 272:	2b b1       	in	r18, 0x0b	; 11
 274:	2c 7f       	andi	r18, 0xFC	; 252
 276:	2b b9       	out	0x0b, r18	; 11
	PORTD = (PORTD&0x0F)|((ch<<4)&0xF0);
 278:	2b b1       	in	r18, 0x0b	; 11
 27a:	82 95       	swap	r24
 27c:	92 95       	swap	r25
 27e:	90 7f       	andi	r25, 0xF0	; 240
 280:	98 27       	eor	r25, r24
 282:	80 7f       	andi	r24, 0xF0	; 240
 284:	98 27       	eor	r25, r24
 286:	92 2f       	mov	r25, r18
 288:	9f 70       	andi	r25, 0x0F	; 15
 28a:	89 2b       	or	r24, r25
 28c:	8b b9       	out	0x0b, r24	; 11
	PORTD = (PORTD&0xFE)|(type&0x01);
 28e:	8b b1       	in	r24, 0x0b	; 11
 290:	8e 7f       	andi	r24, 0xFE	; 254
 292:	68 2b       	or	r22, r24
 294:	6b b9       	out	0x0b, r22	; 11
	PORTD = PORTD|0x02;
 296:	59 9a       	sbi	0x0b, 1	; 11
 298:	83 ec       	ldi	r24, 0xC3	; 195
 29a:	99 e0       	ldi	r25, 0x09	; 9
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <put_Char_LCD_Display+0x4e>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <put_Char_LCD_Display+0x54>
 2a2:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	PORTD &= 0xFC;
 2a4:	8b b1       	in	r24, 0x0b	; 11
 2a6:	8c 7f       	andi	r24, 0xFC	; 252
 2a8:	8b b9       	out	0x0b, r24	; 11
 2aa:	08 95       	ret

000002ac <init_LCD_Display>:
}

void init_LCD_Display(void)
{
	DDRD = 0xFF;
 2ac:	8f ef       	ldi	r24, 0xFF	; 255
 2ae:	8a b9       	out	0x0a, r24	; 10
	put_Char_LCD_Display(0x38,0);
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	70 e0       	ldi	r23, 0x00	; 0
 2b4:	88 e3       	ldi	r24, 0x38	; 56
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 27 01 	call	0x24e	; 0x24e <put_Char_LCD_Display>
 2bc:	83 ec       	ldi	r24, 0xC3	; 195
 2be:	99 e0       	ldi	r25, 0x09	; 9
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <init_LCD_Display+0x14>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <init_LCD_Display+0x1a>
 2c6:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	put_Char_LCD_Display(0x38,0);
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	70 e0       	ldi	r23, 0x00	; 0
 2cc:	88 e3       	ldi	r24, 0x38	; 56
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 27 01 	call	0x24e	; 0x24e <put_Char_LCD_Display>
 2d4:	83 ec       	ldi	r24, 0xC3	; 195
 2d6:	99 e0       	ldi	r25, 0x09	; 9
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <init_LCD_Display+0x2c>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <init_LCD_Display+0x32>
 2de:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	put_Char_LCD_Display(0x38,0);
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	70 e0       	ldi	r23, 0x00	; 0
 2e4:	88 e3       	ldi	r24, 0x38	; 56
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 27 01 	call	0x24e	; 0x24e <put_Char_LCD_Display>
 2ec:	83 ec       	ldi	r24, 0xC3	; 195
 2ee:	99 e0       	ldi	r25, 0x09	; 9
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <init_LCD_Display+0x44>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <init_LCD_Display+0x4a>
 2f6:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	put_Char_LCD_Display(0x02,0);
 2f8:	60 e0       	ldi	r22, 0x00	; 0
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	82 e0       	ldi	r24, 0x02	; 2
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 27 01 	call	0x24e	; 0x24e <put_Char_LCD_Display>
 304:	83 ec       	ldi	r24, 0xC3	; 195
 306:	99 e0       	ldi	r25, 0x09	; 9
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <init_LCD_Display+0x5c>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <init_LCD_Display+0x62>
 30e:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	put_Char_LCD_Display(0x0C,0);
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	8c e0       	ldi	r24, 0x0C	; 12
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 27 01 	call	0x24e	; 0x24e <put_Char_LCD_Display>
 31c:	83 ec       	ldi	r24, 0xC3	; 195
 31e:	99 e0       	ldi	r25, 0x09	; 9
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <init_LCD_Display+0x74>
 324:	00 c0       	rjmp	.+0      	; 0x326 <init_LCD_Display+0x7a>
 326:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	put_Char_LCD_Display(0x01,0);
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 27 01 	call	0x24e	; 0x24e <put_Char_LCD_Display>
 334:	83 ec       	ldi	r24, 0xC3	; 195
 336:	99 e0       	ldi	r25, 0x09	; 9
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	f1 f7       	brne	.-4      	; 0x338 <init_LCD_Display+0x8c>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <init_LCD_Display+0x92>
 33e:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	put_Char_LCD_Display(0x80,0);
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	70 e0       	ldi	r23, 0x00	; 0
 344:	80 e8       	ldi	r24, 0x80	; 128
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 27 01 	call	0x24e	; 0x24e <put_Char_LCD_Display>
 34c:	83 ec       	ldi	r24, 0xC3	; 195
 34e:	99 e0       	ldi	r25, 0x09	; 9
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <init_LCD_Display+0xa4>
 354:	00 c0       	rjmp	.+0      	; 0x356 <init_LCD_Display+0xaa>
 356:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	put_Char_LCD_Display(0x01,0);//clear display
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 27 01 	call	0x24e	; 0x24e <put_Char_LCD_Display>
 364:	08 95       	ret

00000366 <put_string>:
}

// display string
void put_string(const char *_string)
{
 366:	ef 92       	push	r14
 368:	ff 92       	push	r15
 36a:	0f 93       	push	r16
 36c:	1f 93       	push	r17
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	8c 01       	movw	r16, r24
 374:	7c 01       	movw	r14, r24
	int ch_index;
	for(ch_index=0;ch_index<strlen(_string);ch_index++)
 376:	c0 e0       	ldi	r28, 0x00	; 0
 378:	d0 e0       	ldi	r29, 0x00	; 0
 37a:	09 c0       	rjmp	.+18     	; 0x38e <put_string+0x28>
	{
		put_Char_LCD_Display(_string[ch_index], 1);
 37c:	f7 01       	movw	r30, r14
 37e:	81 91       	ld	r24, Z+
 380:	7f 01       	movw	r14, r30
 382:	61 e0       	ldi	r22, 0x01	; 1
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 27 01 	call	0x24e	; 0x24e <put_Char_LCD_Display>

// display string
void put_string(const char *_string)
{
	int ch_index;
	for(ch_index=0;ch_index<strlen(_string);ch_index++)
 38c:	21 96       	adiw	r28, 0x01	; 1
 38e:	f8 01       	movw	r30, r16
 390:	01 90       	ld	r0, Z+
 392:	00 20       	and	r0, r0
 394:	e9 f7       	brne	.-6      	; 0x390 <put_string+0x2a>
 396:	31 97       	sbiw	r30, 0x01	; 1
 398:	e0 1b       	sub	r30, r16
 39a:	f1 0b       	sbc	r31, r17
 39c:	ce 17       	cp	r28, r30
 39e:	df 07       	cpc	r29, r31
 3a0:	68 f3       	brcs	.-38     	; 0x37c <put_string+0x16>
	{
		put_Char_LCD_Display(_string[ch_index], 1);
	}
}
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	1f 91       	pop	r17
 3a8:	0f 91       	pop	r16
 3aa:	ff 90       	pop	r15
 3ac:	ef 90       	pop	r14
 3ae:	08 95       	ret

000003b0 <display_time>:

void display_time()
{
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
	put_Char_LCD_Display(0xC0, 0);
 3b4:	60 e0       	ldi	r22, 0x00	; 0
 3b6:	70 e0       	ldi	r23, 0x00	; 0
 3b8:	80 ec       	ldi	r24, 0xC0	; 192
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 27 01 	call	0x24e	; 0x24e <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.H/10, 1);
 3c0:	c9 e3       	ldi	r28, 0x39	; 57
 3c2:	d1 e0       	ldi	r29, 0x01	; 1
 3c4:	28 81       	ld	r18, Y
 3c6:	39 81       	ldd	r19, Y+1	; 0x01
 3c8:	ad ec       	ldi	r26, 0xCD	; 205
 3ca:	bc ec       	ldi	r27, 0xCC	; 204
 3cc:	0e 94 1c 03 	call	0x638	; 0x638 <__umulhisi3>
 3d0:	96 95       	lsr	r25
 3d2:	87 95       	ror	r24
 3d4:	96 95       	lsr	r25
 3d6:	87 95       	ror	r24
 3d8:	96 95       	lsr	r25
 3da:	87 95       	ror	r24
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	70 e0       	ldi	r23, 0x00	; 0
 3e0:	c0 96       	adiw	r24, 0x30	; 48
 3e2:	0e 94 27 01 	call	0x24e	; 0x24e <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.H%10, 1);
 3e6:	48 81       	ld	r20, Y
 3e8:	59 81       	ldd	r21, Y+1	; 0x01
 3ea:	9a 01       	movw	r18, r20
 3ec:	ad ec       	ldi	r26, 0xCD	; 205
 3ee:	bc ec       	ldi	r27, 0xCC	; 204
 3f0:	0e 94 1c 03 	call	0x638	; 0x638 <__umulhisi3>
 3f4:	96 95       	lsr	r25
 3f6:	87 95       	ror	r24
 3f8:	96 95       	lsr	r25
 3fa:	87 95       	ror	r24
 3fc:	96 95       	lsr	r25
 3fe:	87 95       	ror	r24
 400:	9c 01       	movw	r18, r24
 402:	22 0f       	add	r18, r18
 404:	33 1f       	adc	r19, r19
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	82 0f       	add	r24, r18
 414:	93 1f       	adc	r25, r19
 416:	9a 01       	movw	r18, r20
 418:	28 1b       	sub	r18, r24
 41a:	39 0b       	sbc	r19, r25
 41c:	c9 01       	movw	r24, r18
 41e:	61 e0       	ldi	r22, 0x01	; 1
 420:	70 e0       	ldi	r23, 0x00	; 0
 422:	c0 96       	adiw	r24, 0x30	; 48
 424:	0e 94 27 01 	call	0x24e	; 0x24e <put_Char_LCD_Display>
	put_Char_LCD_Display(':', 1);
 428:	61 e0       	ldi	r22, 0x01	; 1
 42a:	70 e0       	ldi	r23, 0x00	; 0
 42c:	8a e3       	ldi	r24, 0x3A	; 58
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 27 01 	call	0x24e	; 0x24e <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.M/10, 1);
 434:	2a 81       	ldd	r18, Y+2	; 0x02
 436:	3b 81       	ldd	r19, Y+3	; 0x03
 438:	ad ec       	ldi	r26, 0xCD	; 205
 43a:	bc ec       	ldi	r27, 0xCC	; 204
 43c:	0e 94 1c 03 	call	0x638	; 0x638 <__umulhisi3>
 440:	96 95       	lsr	r25
 442:	87 95       	ror	r24
 444:	96 95       	lsr	r25
 446:	87 95       	ror	r24
 448:	96 95       	lsr	r25
 44a:	87 95       	ror	r24
 44c:	61 e0       	ldi	r22, 0x01	; 1
 44e:	70 e0       	ldi	r23, 0x00	; 0
 450:	c0 96       	adiw	r24, 0x30	; 48
 452:	0e 94 27 01 	call	0x24e	; 0x24e <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.M%10, 1);
 456:	4a 81       	ldd	r20, Y+2	; 0x02
 458:	5b 81       	ldd	r21, Y+3	; 0x03
 45a:	9a 01       	movw	r18, r20
 45c:	ad ec       	ldi	r26, 0xCD	; 205
 45e:	bc ec       	ldi	r27, 0xCC	; 204
 460:	0e 94 1c 03 	call	0x638	; 0x638 <__umulhisi3>
 464:	96 95       	lsr	r25
 466:	87 95       	ror	r24
 468:	96 95       	lsr	r25
 46a:	87 95       	ror	r24
 46c:	96 95       	lsr	r25
 46e:	87 95       	ror	r24
 470:	9c 01       	movw	r18, r24
 472:	22 0f       	add	r18, r18
 474:	33 1f       	adc	r19, r19
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	88 0f       	add	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	82 0f       	add	r24, r18
 484:	93 1f       	adc	r25, r19
 486:	9a 01       	movw	r18, r20
 488:	28 1b       	sub	r18, r24
 48a:	39 0b       	sbc	r19, r25
 48c:	c9 01       	movw	r24, r18
 48e:	61 e0       	ldi	r22, 0x01	; 1
 490:	70 e0       	ldi	r23, 0x00	; 0
 492:	c0 96       	adiw	r24, 0x30	; 48
 494:	0e 94 27 01 	call	0x24e	; 0x24e <put_Char_LCD_Display>
	put_Char_LCD_Display(':', 1);
 498:	61 e0       	ldi	r22, 0x01	; 1
 49a:	70 e0       	ldi	r23, 0x00	; 0
 49c:	8a e3       	ldi	r24, 0x3A	; 58
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0e 94 27 01 	call	0x24e	; 0x24e <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.S/10, 1);
 4a4:	2c 81       	ldd	r18, Y+4	; 0x04
 4a6:	3d 81       	ldd	r19, Y+5	; 0x05
 4a8:	ad ec       	ldi	r26, 0xCD	; 205
 4aa:	bc ec       	ldi	r27, 0xCC	; 204
 4ac:	0e 94 1c 03 	call	0x638	; 0x638 <__umulhisi3>
 4b0:	96 95       	lsr	r25
 4b2:	87 95       	ror	r24
 4b4:	96 95       	lsr	r25
 4b6:	87 95       	ror	r24
 4b8:	96 95       	lsr	r25
 4ba:	87 95       	ror	r24
 4bc:	61 e0       	ldi	r22, 0x01	; 1
 4be:	70 e0       	ldi	r23, 0x00	; 0
 4c0:	c0 96       	adiw	r24, 0x30	; 48
 4c2:	0e 94 27 01 	call	0x24e	; 0x24e <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.S%10, 1);
 4c6:	4c 81       	ldd	r20, Y+4	; 0x04
 4c8:	5d 81       	ldd	r21, Y+5	; 0x05
 4ca:	9a 01       	movw	r18, r20
 4cc:	ad ec       	ldi	r26, 0xCD	; 205
 4ce:	bc ec       	ldi	r27, 0xCC	; 204
 4d0:	0e 94 1c 03 	call	0x638	; 0x638 <__umulhisi3>
 4d4:	96 95       	lsr	r25
 4d6:	87 95       	ror	r24
 4d8:	96 95       	lsr	r25
 4da:	87 95       	ror	r24
 4dc:	96 95       	lsr	r25
 4de:	87 95       	ror	r24
 4e0:	9c 01       	movw	r18, r24
 4e2:	22 0f       	add	r18, r18
 4e4:	33 1f       	adc	r19, r19
 4e6:	88 0f       	add	r24, r24
 4e8:	99 1f       	adc	r25, r25
 4ea:	88 0f       	add	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	82 0f       	add	r24, r18
 4f4:	93 1f       	adc	r25, r19
 4f6:	9a 01       	movw	r18, r20
 4f8:	28 1b       	sub	r18, r24
 4fa:	39 0b       	sbc	r19, r25
 4fc:	c9 01       	movw	r24, r18
 4fe:	61 e0       	ldi	r22, 0x01	; 1
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	c0 96       	adiw	r24, 0x30	; 48
 504:	0e 94 27 01 	call	0x24e	; 0x24e <put_Char_LCD_Display>
	
	put_Char_LCD_Display(' ', 1);
 508:	61 e0       	ldi	r22, 0x01	; 1
 50a:	70 e0       	ldi	r23, 0x00	; 0
 50c:	80 e2       	ldi	r24, 0x20	; 32
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	0e 94 27 01 	call	0x24e	; 0x24e <put_Char_LCD_Display>
	put_Char_LCD_Display('B', 1);
 514:	61 e0       	ldi	r22, 0x01	; 1
 516:	70 e0       	ldi	r23, 0x00	; 0
 518:	82 e4       	ldi	r24, 0x42	; 66
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	0e 94 27 01 	call	0x24e	; 0x24e <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + PRESSED_BUTTON, 1);
 520:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <PRESSED_BUTTON>
 524:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <PRESSED_BUTTON+0x1>
 528:	61 e0       	ldi	r22, 0x01	; 1
 52a:	70 e0       	ldi	r23, 0x00	; 0
 52c:	c0 96       	adiw	r24, 0x30	; 48
 52e:	0e 94 27 01 	call	0x24e	; 0x24e <put_Char_LCD_Display>
 532:	df 91       	pop	r29
 534:	cf 91       	pop	r28
 536:	08 95       	ret

00000538 <UV_control_init>:
#include "IPX_UV_light_control.h"
#include <avr/io.h>

void UV_control_init()
{
	UV_CONTROL_DDR |= 1 << UV_CONTROL_PIN;
 538:	39 9a       	sbi	0x07, 1	; 7
	UV_CONTROL_OFF;
 53a:	41 98       	cbi	0x08, 1	; 8
 53c:	08 95       	ret

0000053e <main>:

int main(void)
{
    /* Replace with your application code */
	
	STATE_MACHINE = STATE_INIT;
 53e:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__data_end+0x1>
 542:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <__data_end>
	PRESSED_BUTTON = BUTTON_1;//NO_BUTTON;
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <PRESSED_BUTTON+0x1>
 54e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <PRESSED_BUTTON>
	
	CLOCK.H = 0;
 552:	e9 e3       	ldi	r30, 0x39	; 57
 554:	f1 e0       	ldi	r31, 0x01	; 1
 556:	11 82       	std	Z+1, r1	; 0x01
 558:	10 82       	st	Z, r1
	CLOCK.M = 1;
 55a:	93 83       	std	Z+3, r25	; 0x03
 55c:	82 83       	std	Z+2, r24	; 0x02
	CLOCK.S = 11;
 55e:	8b e0       	ldi	r24, 0x0B	; 11
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	95 83       	std	Z+5, r25	; 0x05
 564:	84 83       	std	Z+4, r24	; 0x04
	
	UV_control_init();
 566:	0e 94 9c 02 	call	0x538	; 0x538 <UV_control_init>
	init_buttons();
 56a:	0e 94 53 00 	call	0xa6	; 0xa6 <init_buttons>
	init_interrupt_200ms();
 56e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <init_interrupt_200ms>
	
	DDRC |= 1 << 0;
 572:	38 9a       	sbi	0x07, 0	; 7
	PORTC |= 1 << 0;
 574:	40 9a       	sbi	0x08, 0	; 8
 576:	2f e7       	ldi	r18, 0x7F	; 127
 578:	89 ea       	ldi	r24, 0xA9	; 169
 57a:	93 e0       	ldi	r25, 0x03	; 3
 57c:	21 50       	subi	r18, 0x01	; 1
 57e:	80 40       	sbci	r24, 0x00	; 0
 580:	90 40       	sbci	r25, 0x00	; 0
 582:	e1 f7       	brne	.-8      	; 0x57c <main+0x3e>
 584:	00 c0       	rjmp	.+0      	; 0x586 <main+0x48>
 586:	00 00       	nop
	
	_delay_ms(1200);
	
	init_LCD_Display();
 588:	0e 94 56 01 	call	0x2ac	; 0x2ac <init_LCD_Display>
 58c:	2f e7       	ldi	r18, 0x7F	; 127
 58e:	89 ea       	ldi	r24, 0xA9	; 169
 590:	93 e0       	ldi	r25, 0x03	; 3
 592:	21 50       	subi	r18, 0x01	; 1
 594:	80 40       	sbci	r24, 0x00	; 0
 596:	90 40       	sbci	r25, 0x00	; 0
 598:	e1 f7       	brne	.-8      	; 0x592 <main+0x54>
 59a:	00 c0       	rjmp	.+0      	; 0x59c <main+0x5e>
 59c:	00 00       	nop
	
	_delay_ms(1200);
	
	put_string("Initializing...");
 59e:	82 e0       	ldi	r24, 0x02	; 2
 5a0:	91 e0       	ldi	r25, 0x01	; 1
 5a2:	0e 94 b3 01 	call	0x366	; 0x366 <put_string>
 5a6:	2f e3       	ldi	r18, 0x3F	; 63
 5a8:	8d e0       	ldi	r24, 0x0D	; 13
 5aa:	93 e0       	ldi	r25, 0x03	; 3
 5ac:	21 50       	subi	r18, 0x01	; 1
 5ae:	80 40       	sbci	r24, 0x00	; 0
 5b0:	90 40       	sbci	r25, 0x00	; 0
 5b2:	e1 f7       	brne	.-8      	; 0x5ac <main+0x6e>
 5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <main+0x78>
 5b6:	00 00       	nop
	
	_delay_ms(1000);
	clear_display();
 5b8:	60 e0       	ldi	r22, 0x00	; 0
 5ba:	70 e0       	ldi	r23, 0x00	; 0
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	0e 94 27 01 	call	0x24e	; 0x24e <put_Char_LCD_Display>
	
	put_Char_LCD_Display(0x80, 0);
 5c4:	60 e0       	ldi	r22, 0x00	; 0
 5c6:	70 e0       	ldi	r23, 0x00	; 0
 5c8:	80 e8       	ldi	r24, 0x80	; 128
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	0e 94 27 01 	call	0x24e	; 0x24e <put_Char_LCD_Display>
	put_string("ScorpionIPX");
 5d0:	82 e1       	ldi	r24, 0x12	; 18
 5d2:	91 e0       	ldi	r25, 0x01	; 1
 5d4:	0e 94 b3 01 	call	0x366	; 0x366 <put_string>
	
	put_Char_LCD_Display(0xC0, 0);
 5d8:	60 e0       	ldi	r22, 0x00	; 0
 5da:	70 e0       	ldi	r23, 0x00	; 0
 5dc:	80 ec       	ldi	r24, 0xC0	; 192
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	0e 94 27 01 	call	0x24e	; 0x24e <put_Char_LCD_Display>
	put_string("UV LampBox v1.0");
 5e4:	8e e1       	ldi	r24, 0x1E	; 30
 5e6:	91 e0       	ldi	r25, 0x01	; 1
 5e8:	0e 94 b3 01 	call	0x366	; 0x366 <put_string>
 5ec:	2f e7       	ldi	r18, 0x7F	; 127
 5ee:	8a e1       	ldi	r24, 0x1A	; 26
 5f0:	96 e0       	ldi	r25, 0x06	; 6
 5f2:	21 50       	subi	r18, 0x01	; 1
 5f4:	80 40       	sbci	r24, 0x00	; 0
 5f6:	90 40       	sbci	r25, 0x00	; 0
 5f8:	e1 f7       	brne	.-8      	; 0x5f2 <main+0xb4>
 5fa:	00 c0       	rjmp	.+0      	; 0x5fc <main+0xbe>
 5fc:	00 00       	nop
	
	_delay_ms(2000);
	clear_display();
 5fe:	60 e0       	ldi	r22, 0x00	; 0
 600:	70 e0       	ldi	r23, 0x00	; 0
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	0e 94 27 01 	call	0x24e	; 0x24e <put_Char_LCD_Display>
	
	put_Char_LCD_Display(0x80, 0);
 60a:	60 e0       	ldi	r22, 0x00	; 0
 60c:	70 e0       	ldi	r23, 0x00	; 0
 60e:	80 e8       	ldi	r24, 0x80	; 128
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	0e 94 27 01 	call	0x24e	; 0x24e <put_Char_LCD_Display>
	put_string("TIME:");
 616:	8e e2       	ldi	r24, 0x2E	; 46
 618:	91 e0       	ldi	r25, 0x01	; 1
 61a:	0e 94 b3 01 	call	0x366	; 0x366 <put_string>
	
	display_time();
 61e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <display_time>
	
	sei();
 622:	78 94       	sei
 624:	2f e3       	ldi	r18, 0x3F	; 63
 626:	8d e0       	ldi	r24, 0x0D	; 13
 628:	93 e0       	ldi	r25, 0x03	; 3
 62a:	21 50       	subi	r18, 0x01	; 1
 62c:	80 40       	sbci	r24, 0x00	; 0
 62e:	90 40       	sbci	r25, 0x00	; 0
 630:	e1 f7       	brne	.-8      	; 0x62a <main+0xec>
 632:	00 c0       	rjmp	.+0      	; 0x634 <main+0xf6>
 634:	00 00       	nop
		/*_delay_ms(100);
		PORTC ^= 1 << 0;
		_delay_ms(5000);
		PORTC ^= 1 << 0;*/
		
    }
 636:	ff cf       	rjmp	.-2      	; 0x636 <main+0xf8>

00000638 <__umulhisi3>:
 638:	a2 9f       	mul	r26, r18
 63a:	b0 01       	movw	r22, r0
 63c:	b3 9f       	mul	r27, r19
 63e:	c0 01       	movw	r24, r0
 640:	a3 9f       	mul	r26, r19
 642:	70 0d       	add	r23, r0
 644:	81 1d       	adc	r24, r1
 646:	11 24       	eor	r1, r1
 648:	91 1d       	adc	r25, r1
 64a:	b2 9f       	mul	r27, r18
 64c:	70 0d       	add	r23, r0
 64e:	81 1d       	adc	r24, r1
 650:	11 24       	eor	r1, r1
 652:	91 1d       	adc	r25, r1
 654:	08 95       	ret

00000656 <_exit>:
 656:	f8 94       	cli

00000658 <__stop_program>:
 658:	ff cf       	rjmp	.-2      	; 0x658 <__stop_program>
