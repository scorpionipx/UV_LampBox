
UV_LampBox.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00000570  00000604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000570  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800136  00800136  0000063a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000063a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000066c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000127d  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a52  00000000  00000000  000019e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007ff  00000000  00000000  0000243b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00002c3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b6  00000000  00000000  00002da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000203  00000000  00000000  0000325a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000345d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e7       	ldi	r30, 0x70	; 112
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 33       	cpi	r26, 0x36	; 54
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e3       	ldi	r26, 0x36	; 54
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 33       	cpi	r26, 0x3E	; 62
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 30 02 	call	0x460	; 0x460 <main>
  9e:	0c 94 b6 02 	jmp	0x56c	; 0x56c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <decrement_clock>:

#include "Global.h"

void decrement_clock()
{
	if(CLOCK.S >= 1)
  a6:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <CLOCK+0x4>
  aa:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <CLOCK+0x5>
  ae:	00 97       	sbiw	r24, 0x00	; 0
  b0:	31 f0       	breq	.+12     	; 0xbe <decrement_clock+0x18>
	{
		CLOCK.S --;
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <CLOCK+0x5>
  b8:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <CLOCK+0x4>
  bc:	08 95       	ret
	}
	else
	{
		CLOCK.S = 59;
  be:	e8 e3       	ldi	r30, 0x38	; 56
  c0:	f1 e0       	ldi	r31, 0x01	; 1
  c2:	8b e3       	ldi	r24, 0x3B	; 59
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	95 83       	std	Z+5, r25	; 0x05
  c8:	84 83       	std	Z+4, r24	; 0x04
		if(CLOCK.M >= 1)
  ca:	82 81       	ldd	r24, Z+2	; 0x02
  cc:	93 81       	ldd	r25, Z+3	; 0x03
  ce:	00 97       	sbiw	r24, 0x00	; 0
  d0:	31 f0       	breq	.+12     	; 0xde <decrement_clock+0x38>
		{
			CLOCK.M --;
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <CLOCK+0x3>
  d8:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <CLOCK+0x2>
  dc:	08 95       	ret
		}
		else
		{
			CLOCK.M = 59;
  de:	e8 e3       	ldi	r30, 0x38	; 56
  e0:	f1 e0       	ldi	r31, 0x01	; 1
  e2:	8b e3       	ldi	r24, 0x3B	; 59
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	93 83       	std	Z+3, r25	; 0x03
  e8:	82 83       	std	Z+2, r24	; 0x02
			if(CLOCK.H >= 1)
  ea:	80 81       	ld	r24, Z
  ec:	91 81       	ldd	r25, Z+1	; 0x01
  ee:	00 97       	sbiw	r24, 0x00	; 0
  f0:	29 f0       	breq	.+10     	; 0xfc <decrement_clock+0x56>
			{
				CLOCK.H --;
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <CLOCK+0x1>
  f8:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <CLOCK>
  fc:	08 95       	ret

000000fe <init_interrupt_200ms>:

// 10 ms timer
void init_interrupt_200ms()
{
	// Set the Timer Mode to CTC
	TCCR0A |= (1 << WGM01);
  fe:	84 b5       	in	r24, 0x24	; 36
 100:	82 60       	ori	r24, 0x02	; 2
 102:	84 bd       	out	0x24, r24	; 36

	// Set the value that you want to count to
	OCR0A = 0x26;
 104:	86 e2       	ldi	r24, 0x26	; 38
 106:	87 bd       	out	0x27, r24	; 39

	TIMSK0 |= (1 << OCIE0A);    //Set the ISR COMPA vector
 108:	ee e6       	ldi	r30, 0x6E	; 110
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	82 60       	ori	r24, 0x02	; 2
 110:	80 83       	st	Z, r24

	TCCR0B |= (1 << CS02);
 112:	85 b5       	in	r24, 0x25	; 37
 114:	84 60       	ori	r24, 0x04	; 4
 116:	85 bd       	out	0x25, r24	; 37
 118:	08 95       	ret

0000011a <__vector_14>:
	// set prescaler to 256 and start the timer
}

ISR (TIMER0_COMPA_vect)  // timer0 overflow interrupt
{
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	2f 93       	push	r18
 126:	3f 93       	push	r19
 128:	4f 93       	push	r20
 12a:	5f 93       	push	r21
 12c:	6f 93       	push	r22
 12e:	7f 93       	push	r23
 130:	8f 93       	push	r24
 132:	9f 93       	push	r25
 134:	af 93       	push	r26
 136:	bf 93       	push	r27
 138:	ef 93       	push	r30
 13a:	ff 93       	push	r31
	//event to be executed every 10ms here
	counter ++;
 13c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 140:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 14a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	if(counter >= 100)
 14e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 152:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 156:	84 36       	cpi	r24, 0x64	; 100
 158:	91 05       	cpc	r25, r1
 15a:	74 f0       	brlt	.+28     	; 0x178 <__vector_14+0x5e>
	{
		counter = 1;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 164:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		//PORTC ^= 1 << 0;
		decrement_clock();
 168:	0e 94 53 00 	call	0xa6	; 0xa6 <decrement_clock>
		display_time();
 16c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <display_time>
		UV_CONTROL_TOGGLE;
 170:	98 b1       	in	r25, 0x08	; 8
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	89 27       	eor	r24, r25
 176:	88 b9       	out	0x08, r24	; 8
	}
}
 178:	ff 91       	pop	r31
 17a:	ef 91       	pop	r30
 17c:	bf 91       	pop	r27
 17e:	af 91       	pop	r26
 180:	9f 91       	pop	r25
 182:	8f 91       	pop	r24
 184:	7f 91       	pop	r23
 186:	6f 91       	pop	r22
 188:	5f 91       	pop	r21
 18a:	4f 91       	pop	r20
 18c:	3f 91       	pop	r19
 18e:	2f 91       	pop	r18
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <put_Char_LCD_Display>:
#define MAX_CHARS_PER_ROW 16
#define LCD_DELAY_MS 10

void put_Char_LCD_Display(int ch, int type)
{
	PORTD = (PORTD&0x0F)|(ch&0xF0);
 19a:	2b b1       	in	r18, 0x0b	; 11
 19c:	38 2f       	mov	r19, r24
 19e:	30 7f       	andi	r19, 0xF0	; 240
 1a0:	2f 70       	andi	r18, 0x0F	; 15
 1a2:	23 2b       	or	r18, r19
 1a4:	2b b9       	out	0x0b, r18	; 11
	PORTD = (PORTD&0xFE)|(type&0x01);
 1a6:	2b b1       	in	r18, 0x0b	; 11
 1a8:	61 70       	andi	r22, 0x01	; 1
 1aa:	2e 7f       	andi	r18, 0xFE	; 254
 1ac:	26 2b       	or	r18, r22
 1ae:	2b b9       	out	0x0b, r18	; 11
	PORTD = PORTD|0x02;
 1b0:	59 9a       	sbi	0x0b, 1	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	e3 ec       	ldi	r30, 0xC3	; 195
 1b4:	f9 e0       	ldi	r31, 0x09	; 9
 1b6:	31 97       	sbiw	r30, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <put_Char_LCD_Display+0x1c>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <put_Char_LCD_Display+0x22>
 1bc:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	PORTD &= 0xFC;
 1be:	2b b1       	in	r18, 0x0b	; 11
 1c0:	2c 7f       	andi	r18, 0xFC	; 252
 1c2:	2b b9       	out	0x0b, r18	; 11
	PORTD = (PORTD&0x0F)|((ch<<4)&0xF0);
 1c4:	2b b1       	in	r18, 0x0b	; 11
 1c6:	82 95       	swap	r24
 1c8:	92 95       	swap	r25
 1ca:	90 7f       	andi	r25, 0xF0	; 240
 1cc:	98 27       	eor	r25, r24
 1ce:	80 7f       	andi	r24, 0xF0	; 240
 1d0:	98 27       	eor	r25, r24
 1d2:	92 2f       	mov	r25, r18
 1d4:	9f 70       	andi	r25, 0x0F	; 15
 1d6:	89 2b       	or	r24, r25
 1d8:	8b b9       	out	0x0b, r24	; 11
	PORTD = (PORTD&0xFE)|(type&0x01);
 1da:	8b b1       	in	r24, 0x0b	; 11
 1dc:	8e 7f       	andi	r24, 0xFE	; 254
 1de:	68 2b       	or	r22, r24
 1e0:	6b b9       	out	0x0b, r22	; 11
	PORTD = PORTD|0x02;
 1e2:	59 9a       	sbi	0x0b, 1	; 11
 1e4:	83 ec       	ldi	r24, 0xC3	; 195
 1e6:	99 e0       	ldi	r25, 0x09	; 9
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <put_Char_LCD_Display+0x4e>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <put_Char_LCD_Display+0x54>
 1ee:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	PORTD &= 0xFC;
 1f0:	8b b1       	in	r24, 0x0b	; 11
 1f2:	8c 7f       	andi	r24, 0xFC	; 252
 1f4:	8b b9       	out	0x0b, r24	; 11
 1f6:	08 95       	ret

000001f8 <init_LCD_Display>:
}

void init_LCD_Display(void)
{
	DDRD = 0xFF;
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	8a b9       	out	0x0a, r24	; 10
	put_Char_LCD_Display(0x38,0);
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	88 e3       	ldi	r24, 0x38	; 56
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 cd 00 	call	0x19a	; 0x19a <put_Char_LCD_Display>
 208:	83 ec       	ldi	r24, 0xC3	; 195
 20a:	99 e0       	ldi	r25, 0x09	; 9
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <init_LCD_Display+0x14>
 210:	00 c0       	rjmp	.+0      	; 0x212 <init_LCD_Display+0x1a>
 212:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	put_Char_LCD_Display(0x38,0);
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	70 e0       	ldi	r23, 0x00	; 0
 218:	88 e3       	ldi	r24, 0x38	; 56
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 cd 00 	call	0x19a	; 0x19a <put_Char_LCD_Display>
 220:	83 ec       	ldi	r24, 0xC3	; 195
 222:	99 e0       	ldi	r25, 0x09	; 9
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <init_LCD_Display+0x2c>
 228:	00 c0       	rjmp	.+0      	; 0x22a <init_LCD_Display+0x32>
 22a:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	put_Char_LCD_Display(0x38,0);
 22c:	60 e0       	ldi	r22, 0x00	; 0
 22e:	70 e0       	ldi	r23, 0x00	; 0
 230:	88 e3       	ldi	r24, 0x38	; 56
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 cd 00 	call	0x19a	; 0x19a <put_Char_LCD_Display>
 238:	83 ec       	ldi	r24, 0xC3	; 195
 23a:	99 e0       	ldi	r25, 0x09	; 9
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <init_LCD_Display+0x44>
 240:	00 c0       	rjmp	.+0      	; 0x242 <init_LCD_Display+0x4a>
 242:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	put_Char_LCD_Display(0x02,0);
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 cd 00 	call	0x19a	; 0x19a <put_Char_LCD_Display>
 250:	83 ec       	ldi	r24, 0xC3	; 195
 252:	99 e0       	ldi	r25, 0x09	; 9
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <init_LCD_Display+0x5c>
 258:	00 c0       	rjmp	.+0      	; 0x25a <init_LCD_Display+0x62>
 25a:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	put_Char_LCD_Display(0x0C,0);
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	8c e0       	ldi	r24, 0x0C	; 12
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 cd 00 	call	0x19a	; 0x19a <put_Char_LCD_Display>
 268:	83 ec       	ldi	r24, 0xC3	; 195
 26a:	99 e0       	ldi	r25, 0x09	; 9
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <init_LCD_Display+0x74>
 270:	00 c0       	rjmp	.+0      	; 0x272 <init_LCD_Display+0x7a>
 272:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	put_Char_LCD_Display(0x01,0);
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 cd 00 	call	0x19a	; 0x19a <put_Char_LCD_Display>
 280:	83 ec       	ldi	r24, 0xC3	; 195
 282:	99 e0       	ldi	r25, 0x09	; 9
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <init_LCD_Display+0x8c>
 288:	00 c0       	rjmp	.+0      	; 0x28a <init_LCD_Display+0x92>
 28a:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	put_Char_LCD_Display(0x80,0);
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	70 e0       	ldi	r23, 0x00	; 0
 290:	80 e8       	ldi	r24, 0x80	; 128
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 cd 00 	call	0x19a	; 0x19a <put_Char_LCD_Display>
 298:	83 ec       	ldi	r24, 0xC3	; 195
 29a:	99 e0       	ldi	r25, 0x09	; 9
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <init_LCD_Display+0xa4>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <init_LCD_Display+0xaa>
 2a2:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	put_Char_LCD_Display(0x01,0);//clear display
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 cd 00 	call	0x19a	; 0x19a <put_Char_LCD_Display>
 2b0:	08 95       	ret

000002b2 <put_string>:
}

// display string
void put_string(const char *_string)
{
 2b2:	ef 92       	push	r14
 2b4:	ff 92       	push	r15
 2b6:	0f 93       	push	r16
 2b8:	1f 93       	push	r17
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	8c 01       	movw	r16, r24
 2c0:	7c 01       	movw	r14, r24
	int ch_index;
	for(ch_index=0;ch_index<strlen(_string);ch_index++)
 2c2:	c0 e0       	ldi	r28, 0x00	; 0
 2c4:	d0 e0       	ldi	r29, 0x00	; 0
 2c6:	09 c0       	rjmp	.+18     	; 0x2da <put_string+0x28>
	{
		put_Char_LCD_Display(_string[ch_index], 1);
 2c8:	f7 01       	movw	r30, r14
 2ca:	81 91       	ld	r24, Z+
 2cc:	7f 01       	movw	r14, r30
 2ce:	61 e0       	ldi	r22, 0x01	; 1
 2d0:	70 e0       	ldi	r23, 0x00	; 0
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 cd 00 	call	0x19a	; 0x19a <put_Char_LCD_Display>

// display string
void put_string(const char *_string)
{
	int ch_index;
	for(ch_index=0;ch_index<strlen(_string);ch_index++)
 2d8:	21 96       	adiw	r28, 0x01	; 1
 2da:	f8 01       	movw	r30, r16
 2dc:	01 90       	ld	r0, Z+
 2de:	00 20       	and	r0, r0
 2e0:	e9 f7       	brne	.-6      	; 0x2dc <put_string+0x2a>
 2e2:	31 97       	sbiw	r30, 0x01	; 1
 2e4:	e0 1b       	sub	r30, r16
 2e6:	f1 0b       	sbc	r31, r17
 2e8:	ce 17       	cp	r28, r30
 2ea:	df 07       	cpc	r29, r31
 2ec:	68 f3       	brcs	.-38     	; 0x2c8 <put_string+0x16>
	{
		put_Char_LCD_Display(_string[ch_index], 1);
	}
}
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	0f 91       	pop	r16
 2f6:	ff 90       	pop	r15
 2f8:	ef 90       	pop	r14
 2fa:	08 95       	ret

000002fc <display_time>:

void display_time()
{
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
	put_Char_LCD_Display(0xC0, 0);
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	70 e0       	ldi	r23, 0x00	; 0
 304:	80 ec       	ldi	r24, 0xC0	; 192
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 cd 00 	call	0x19a	; 0x19a <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.H/10, 1);
 30c:	c8 e3       	ldi	r28, 0x38	; 56
 30e:	d1 e0       	ldi	r29, 0x01	; 1
 310:	28 81       	ld	r18, Y
 312:	39 81       	ldd	r19, Y+1	; 0x01
 314:	ad ec       	ldi	r26, 0xCD	; 205
 316:	bc ec       	ldi	r27, 0xCC	; 204
 318:	0e 94 a7 02 	call	0x54e	; 0x54e <__umulhisi3>
 31c:	96 95       	lsr	r25
 31e:	87 95       	ror	r24
 320:	96 95       	lsr	r25
 322:	87 95       	ror	r24
 324:	96 95       	lsr	r25
 326:	87 95       	ror	r24
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	c0 96       	adiw	r24, 0x30	; 48
 32e:	0e 94 cd 00 	call	0x19a	; 0x19a <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.H%10, 1);
 332:	48 81       	ld	r20, Y
 334:	59 81       	ldd	r21, Y+1	; 0x01
 336:	9a 01       	movw	r18, r20
 338:	ad ec       	ldi	r26, 0xCD	; 205
 33a:	bc ec       	ldi	r27, 0xCC	; 204
 33c:	0e 94 a7 02 	call	0x54e	; 0x54e <__umulhisi3>
 340:	96 95       	lsr	r25
 342:	87 95       	ror	r24
 344:	96 95       	lsr	r25
 346:	87 95       	ror	r24
 348:	96 95       	lsr	r25
 34a:	87 95       	ror	r24
 34c:	9c 01       	movw	r18, r24
 34e:	22 0f       	add	r18, r18
 350:	33 1f       	adc	r19, r19
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	82 0f       	add	r24, r18
 360:	93 1f       	adc	r25, r19
 362:	9a 01       	movw	r18, r20
 364:	28 1b       	sub	r18, r24
 366:	39 0b       	sbc	r19, r25
 368:	c9 01       	movw	r24, r18
 36a:	61 e0       	ldi	r22, 0x01	; 1
 36c:	70 e0       	ldi	r23, 0x00	; 0
 36e:	c0 96       	adiw	r24, 0x30	; 48
 370:	0e 94 cd 00 	call	0x19a	; 0x19a <put_Char_LCD_Display>
	put_Char_LCD_Display(':', 1);
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	8a e3       	ldi	r24, 0x3A	; 58
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 cd 00 	call	0x19a	; 0x19a <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.M/10, 1);
 380:	2a 81       	ldd	r18, Y+2	; 0x02
 382:	3b 81       	ldd	r19, Y+3	; 0x03
 384:	ad ec       	ldi	r26, 0xCD	; 205
 386:	bc ec       	ldi	r27, 0xCC	; 204
 388:	0e 94 a7 02 	call	0x54e	; 0x54e <__umulhisi3>
 38c:	96 95       	lsr	r25
 38e:	87 95       	ror	r24
 390:	96 95       	lsr	r25
 392:	87 95       	ror	r24
 394:	96 95       	lsr	r25
 396:	87 95       	ror	r24
 398:	61 e0       	ldi	r22, 0x01	; 1
 39a:	70 e0       	ldi	r23, 0x00	; 0
 39c:	c0 96       	adiw	r24, 0x30	; 48
 39e:	0e 94 cd 00 	call	0x19a	; 0x19a <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.M%10, 1);
 3a2:	4a 81       	ldd	r20, Y+2	; 0x02
 3a4:	5b 81       	ldd	r21, Y+3	; 0x03
 3a6:	9a 01       	movw	r18, r20
 3a8:	ad ec       	ldi	r26, 0xCD	; 205
 3aa:	bc ec       	ldi	r27, 0xCC	; 204
 3ac:	0e 94 a7 02 	call	0x54e	; 0x54e <__umulhisi3>
 3b0:	96 95       	lsr	r25
 3b2:	87 95       	ror	r24
 3b4:	96 95       	lsr	r25
 3b6:	87 95       	ror	r24
 3b8:	96 95       	lsr	r25
 3ba:	87 95       	ror	r24
 3bc:	9c 01       	movw	r18, r24
 3be:	22 0f       	add	r18, r18
 3c0:	33 1f       	adc	r19, r19
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	82 0f       	add	r24, r18
 3d0:	93 1f       	adc	r25, r19
 3d2:	9a 01       	movw	r18, r20
 3d4:	28 1b       	sub	r18, r24
 3d6:	39 0b       	sbc	r19, r25
 3d8:	c9 01       	movw	r24, r18
 3da:	61 e0       	ldi	r22, 0x01	; 1
 3dc:	70 e0       	ldi	r23, 0x00	; 0
 3de:	c0 96       	adiw	r24, 0x30	; 48
 3e0:	0e 94 cd 00 	call	0x19a	; 0x19a <put_Char_LCD_Display>
	put_Char_LCD_Display(':', 1);
 3e4:	61 e0       	ldi	r22, 0x01	; 1
 3e6:	70 e0       	ldi	r23, 0x00	; 0
 3e8:	8a e3       	ldi	r24, 0x3A	; 58
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 cd 00 	call	0x19a	; 0x19a <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.S/10, 1);
 3f0:	2c 81       	ldd	r18, Y+4	; 0x04
 3f2:	3d 81       	ldd	r19, Y+5	; 0x05
 3f4:	ad ec       	ldi	r26, 0xCD	; 205
 3f6:	bc ec       	ldi	r27, 0xCC	; 204
 3f8:	0e 94 a7 02 	call	0x54e	; 0x54e <__umulhisi3>
 3fc:	96 95       	lsr	r25
 3fe:	87 95       	ror	r24
 400:	96 95       	lsr	r25
 402:	87 95       	ror	r24
 404:	96 95       	lsr	r25
 406:	87 95       	ror	r24
 408:	61 e0       	ldi	r22, 0x01	; 1
 40a:	70 e0       	ldi	r23, 0x00	; 0
 40c:	c0 96       	adiw	r24, 0x30	; 48
 40e:	0e 94 cd 00 	call	0x19a	; 0x19a <put_Char_LCD_Display>
	put_Char_LCD_Display('0' + CLOCK.S%10, 1);
 412:	4c 81       	ldd	r20, Y+4	; 0x04
 414:	5d 81       	ldd	r21, Y+5	; 0x05
 416:	9a 01       	movw	r18, r20
 418:	ad ec       	ldi	r26, 0xCD	; 205
 41a:	bc ec       	ldi	r27, 0xCC	; 204
 41c:	0e 94 a7 02 	call	0x54e	; 0x54e <__umulhisi3>
 420:	96 95       	lsr	r25
 422:	87 95       	ror	r24
 424:	96 95       	lsr	r25
 426:	87 95       	ror	r24
 428:	96 95       	lsr	r25
 42a:	87 95       	ror	r24
 42c:	9c 01       	movw	r18, r24
 42e:	22 0f       	add	r18, r18
 430:	33 1f       	adc	r19, r19
 432:	88 0f       	add	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	88 0f       	add	r24, r24
 43c:	99 1f       	adc	r25, r25
 43e:	82 0f       	add	r24, r18
 440:	93 1f       	adc	r25, r19
 442:	9a 01       	movw	r18, r20
 444:	28 1b       	sub	r18, r24
 446:	39 0b       	sbc	r19, r25
 448:	c9 01       	movw	r24, r18
 44a:	61 e0       	ldi	r22, 0x01	; 1
 44c:	70 e0       	ldi	r23, 0x00	; 0
 44e:	c0 96       	adiw	r24, 0x30	; 48
 450:	0e 94 cd 00 	call	0x19a	; 0x19a <put_Char_LCD_Display>
 454:	df 91       	pop	r29
 456:	cf 91       	pop	r28
 458:	08 95       	ret

0000045a <UV_control_init>:
#include "IPX_UV_light_control.h"
#include <avr/io.h>

void UV_control_init()
{
	UV_CONTROL_DDR |= 1 << UV_CONTROL_PIN;
 45a:	39 9a       	sbi	0x07, 1	; 7
	UV_CONTROL_OFF;
 45c:	41 98       	cbi	0x08, 1	; 8
 45e:	08 95       	ret

00000460 <main>:

int main(void)
{
    /* Replace with your application code */
	
	STATE_MACHINE = STATE_INIT;
 460:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <__data_end+0x1>
 464:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end>
	
	CLOCK.H = 0;
 468:	e8 e3       	ldi	r30, 0x38	; 56
 46a:	f1 e0       	ldi	r31, 0x01	; 1
 46c:	11 82       	std	Z+1, r1	; 0x01
 46e:	10 82       	st	Z, r1
	CLOCK.M = 1;
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	93 83       	std	Z+3, r25	; 0x03
 476:	82 83       	std	Z+2, r24	; 0x02
	CLOCK.S = 11;
 478:	8b e0       	ldi	r24, 0x0B	; 11
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	95 83       	std	Z+5, r25	; 0x05
 47e:	84 83       	std	Z+4, r24	; 0x04
	
	UV_control_init();
 480:	0e 94 2d 02 	call	0x45a	; 0x45a <UV_control_init>
	init_interrupt_200ms();
 484:	0e 94 7f 00 	call	0xfe	; 0xfe <init_interrupt_200ms>
	
	DDRC |= 1 << 0;
 488:	38 9a       	sbi	0x07, 0	; 7
	PORTC |= 1 << 0;
 48a:	40 9a       	sbi	0x08, 0	; 8
 48c:	2f e7       	ldi	r18, 0x7F	; 127
 48e:	89 ea       	ldi	r24, 0xA9	; 169
 490:	93 e0       	ldi	r25, 0x03	; 3
 492:	21 50       	subi	r18, 0x01	; 1
 494:	80 40       	sbci	r24, 0x00	; 0
 496:	90 40       	sbci	r25, 0x00	; 0
 498:	e1 f7       	brne	.-8      	; 0x492 <main+0x32>
 49a:	00 c0       	rjmp	.+0      	; 0x49c <main+0x3c>
 49c:	00 00       	nop
	
	_delay_ms(1200);
	
	init_LCD_Display();
 49e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <init_LCD_Display>
 4a2:	2f e7       	ldi	r18, 0x7F	; 127
 4a4:	89 ea       	ldi	r24, 0xA9	; 169
 4a6:	93 e0       	ldi	r25, 0x03	; 3
 4a8:	21 50       	subi	r18, 0x01	; 1
 4aa:	80 40       	sbci	r24, 0x00	; 0
 4ac:	90 40       	sbci	r25, 0x00	; 0
 4ae:	e1 f7       	brne	.-8      	; 0x4a8 <main+0x48>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <main+0x52>
 4b2:	00 00       	nop
	
	_delay_ms(1200);
	
	put_string("Initializing...");
 4b4:	82 e0       	ldi	r24, 0x02	; 2
 4b6:	91 e0       	ldi	r25, 0x01	; 1
 4b8:	0e 94 59 01 	call	0x2b2	; 0x2b2 <put_string>
 4bc:	2f e3       	ldi	r18, 0x3F	; 63
 4be:	8d e0       	ldi	r24, 0x0D	; 13
 4c0:	93 e0       	ldi	r25, 0x03	; 3
 4c2:	21 50       	subi	r18, 0x01	; 1
 4c4:	80 40       	sbci	r24, 0x00	; 0
 4c6:	90 40       	sbci	r25, 0x00	; 0
 4c8:	e1 f7       	brne	.-8      	; 0x4c2 <main+0x62>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <main+0x6c>
 4cc:	00 00       	nop
	
	_delay_ms(1000);
	clear_display();
 4ce:	60 e0       	ldi	r22, 0x00	; 0
 4d0:	70 e0       	ldi	r23, 0x00	; 0
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 cd 00 	call	0x19a	; 0x19a <put_Char_LCD_Display>
	
	put_Char_LCD_Display(0x80, 0);
 4da:	60 e0       	ldi	r22, 0x00	; 0
 4dc:	70 e0       	ldi	r23, 0x00	; 0
 4de:	80 e8       	ldi	r24, 0x80	; 128
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	0e 94 cd 00 	call	0x19a	; 0x19a <put_Char_LCD_Display>
	put_string("ScorpionIPX");
 4e6:	82 e1       	ldi	r24, 0x12	; 18
 4e8:	91 e0       	ldi	r25, 0x01	; 1
 4ea:	0e 94 59 01 	call	0x2b2	; 0x2b2 <put_string>
	
	put_Char_LCD_Display(0xC0, 0);
 4ee:	60 e0       	ldi	r22, 0x00	; 0
 4f0:	70 e0       	ldi	r23, 0x00	; 0
 4f2:	80 ec       	ldi	r24, 0xC0	; 192
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	0e 94 cd 00 	call	0x19a	; 0x19a <put_Char_LCD_Display>
	put_string("UV LightBox v1.0");
 4fa:	8e e1       	ldi	r24, 0x1E	; 30
 4fc:	91 e0       	ldi	r25, 0x01	; 1
 4fe:	0e 94 59 01 	call	0x2b2	; 0x2b2 <put_string>
 502:	2f eb       	ldi	r18, 0xBF	; 191
 504:	8c e5       	ldi	r24, 0x5C	; 92
 506:	95 e1       	ldi	r25, 0x15	; 21
 508:	21 50       	subi	r18, 0x01	; 1
 50a:	80 40       	sbci	r24, 0x00	; 0
 50c:	90 40       	sbci	r25, 0x00	; 0
 50e:	e1 f7       	brne	.-8      	; 0x508 <main+0xa8>
 510:	00 c0       	rjmp	.+0      	; 0x512 <main+0xb2>
 512:	00 00       	nop
	
	_delay_ms(7000);
	clear_display();
 514:	60 e0       	ldi	r22, 0x00	; 0
 516:	70 e0       	ldi	r23, 0x00	; 0
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	0e 94 cd 00 	call	0x19a	; 0x19a <put_Char_LCD_Display>
	
	put_Char_LCD_Display(0x80, 0);
 520:	60 e0       	ldi	r22, 0x00	; 0
 522:	70 e0       	ldi	r23, 0x00	; 0
 524:	80 e8       	ldi	r24, 0x80	; 128
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	0e 94 cd 00 	call	0x19a	; 0x19a <put_Char_LCD_Display>
	put_string("TIME:");
 52c:	8f e2       	ldi	r24, 0x2F	; 47
 52e:	91 e0       	ldi	r25, 0x01	; 1
 530:	0e 94 59 01 	call	0x2b2	; 0x2b2 <put_string>
	
	display_time();
 534:	0e 94 7e 01 	call	0x2fc	; 0x2fc <display_time>
	
	sei();
 538:	78 94       	sei
 53a:	2f e3       	ldi	r18, 0x3F	; 63
 53c:	8d e0       	ldi	r24, 0x0D	; 13
 53e:	93 e0       	ldi	r25, 0x03	; 3
 540:	21 50       	subi	r18, 0x01	; 1
 542:	80 40       	sbci	r24, 0x00	; 0
 544:	90 40       	sbci	r25, 0x00	; 0
 546:	e1 f7       	brne	.-8      	; 0x540 <main+0xe0>
 548:	00 c0       	rjmp	.+0      	; 0x54a <main+0xea>
 54a:	00 00       	nop
		/*_delay_ms(100);
		PORTC ^= 1 << 0;
		_delay_ms(5000);
		PORTC ^= 1 << 0;*/
		
    }
 54c:	ff cf       	rjmp	.-2      	; 0x54c <main+0xec>

0000054e <__umulhisi3>:
 54e:	a2 9f       	mul	r26, r18
 550:	b0 01       	movw	r22, r0
 552:	b3 9f       	mul	r27, r19
 554:	c0 01       	movw	r24, r0
 556:	a3 9f       	mul	r26, r19
 558:	70 0d       	add	r23, r0
 55a:	81 1d       	adc	r24, r1
 55c:	11 24       	eor	r1, r1
 55e:	91 1d       	adc	r25, r1
 560:	b2 9f       	mul	r27, r18
 562:	70 0d       	add	r23, r0
 564:	81 1d       	adc	r24, r1
 566:	11 24       	eor	r1, r1
 568:	91 1d       	adc	r25, r1
 56a:	08 95       	ret

0000056c <_exit>:
 56c:	f8 94       	cli

0000056e <__stop_program>:
 56e:	ff cf       	rjmp	.-2      	; 0x56e <__stop_program>
